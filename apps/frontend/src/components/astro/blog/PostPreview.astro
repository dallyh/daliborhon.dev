---
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import type { Post } from "@services/sanity/queries/posts";
import { Image } from "@unpic/astro";
import { getBlogPostUrl, getCategoryUrl, getOgImageUrl } from "@utils";
import Icon from "node_modules/astro-icon/components/Icon.astro";
import { getRelativeLocaleUrl } from "astro:i18n";

interface Props {
	post: Post;
}

const { post } = Astro.props;
const locale = Astro.currentLocale!;
const postUrl = getBlogPostUrl(locale, post);
---

<article class="post-preview">
	<header class="header">
		<div class="date">
			<FormattedDate pubDateTime={post.publishedAt} modDatetime={post.updatedAt} locale={locale} />
		</div>
	</header>
	<a class="post-image" href={postUrl}>
		<Icon name="bi:chevron-right" />
		<div class="overlay"></div>
		<span class="sr-only">{post.title}</span>
		{
			post.mainImage && (
				<div class="image">
					<Image src={post.mainImage.asset.url} alt={post!.title!} width={1200} height={630} loading="eager" placeholder="blurhash" />
				</div>
			)
		}
		{
			!post.mainImage && (
				<div class="image">
					<Image src={getOgImageUrl(locale, post)} alt={post!.title!} width={1200} height={630} loading="eager" placeholder="blurhash" />
				</div>
			)
		}
	</a>
	<div class="post-description">
		<div>
			<h3>
				<a href={postUrl} class="post-title">{post?.title}<Icon name="bi:chevron-right" /></a>
			</h3>
			<div class="post-meta">
				<ul class="category-list">
					{
						post.categories.map((category) => {
							return (
								<li>
									<a href={getCategoryUrl(locale, category)}>{category.title}</a>
								</li>
							);
						})
					}
				</ul>
				<ul class="tag-list">
					{
						post.tags.map((tag) => {
							return (
								<li>
									<a href={getRelativeLocaleUrl(locale, `/blog/tags/${tag?.slug}/`)}>#{tag?.title.toLowerCase()}</a>
								</li>
							);
						})
					}
				</ul>
			</div>
		</div>
		<div class="post-headline">
			<p>
				{post.headline}
			</p>
		</div>
	</div>
</article>

<style>
	.post-preview {
		display: grid;
		grid-template-rows: max-content 1fr;
		border: var(--border);
		box-shadow: var(--global-box-shadow);
		position: relative;
		height: 100%;
		border-radius: var(--border-radius);
		overflow: hidden;
	}

	.header {
		padding: 0.7rem;
		background-color: rgba(var(--secondary), 1);
		font-size: 0.825rem;
		z-index: 1;
		border-bottom: var(--border);
		position: absolute;
		border-right: var(--border);
		top: 0;
	}

	.post-description {
		display: flex;
		flex-direction: column;
		background-color: rgba(var(--secondary), 1);
		border-top: var(--border);
		font-size: 0.825rem;

		> div:first-child {
			display: flex;
			flex-direction: column;
			gap: 0.725rem;
			padding: 1rem;
		}

		a {
			display: block;
			position: relative;
			width: 100%;

			svg {
				stroke: rgba(var(--accent), 1);
				position: absolute;
				right: 0;
				top: 50%;
				transform: translateY(-50%);
			}
		}
	}

	.post-meta {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		flex-basis: 4rem;

		.date,
		.categories,
		.tags {
			display: flex;
			align-items: center;
		}
	}

	.post-headline {
		border-top: var(--border);
		padding: 1rem;
	}

	.tag-list,
	.category-list {
		display: flex;
		width: 100%;
		gap: 0.25rem;
		flex-wrap: wrap;

		li {
			display: inline-flex;
		}

		li:not(:last-child) {
			&::after {
				content: "/";
				opacity: 0.35;
				margin-left: 0.3rem;
				margin-right: 0.1rem;
			}
		}
	}

	.post-image {
		position: relative;
		overflow: hidden;
		height: 100%;
		width: 100%;

		@media (max-width: 768px) {
			display: flex;
		}

		.image {
			border-radius: inherit;
			width: 100%;
			height: 100%;
			overflow: hidden;
			display: flex;
			justify-content: center;
			align-items: center;

			@media (max-width: 768px) {
				max-height: 12rem;
			}

			img {
				width: 100%;
				height: 100%;
				object-fit: contain;
				object-position: center;
				border-radius: inherit;
			}
		}

		svg {
			opacity: 0;
			color: white;
			stroke: white;
			stroke-width: 2px;
			position: absolute;
			left: 50%;
			top: 50%;
			transform: translateY(-50%) translateX(-50%) scale(1.4);
			transition: opacity 0.2s ease-in-out;
			z-index: 3;
		}

		.overlay {
			position: absolute;
			left: 0;
			top: 0;
			border: var(--border);
			background-color: var(--bg-color);
			width: 100%;
			height: 100%;
			transition: opacity 0.2s ease-in-out;
			opacity: 0;
			border: none;
			background-color: rgba(0, 0, 0, 0.35);
		}

		&:hover {
			svg {
				opacity: 1;
			}

			.overlay {
				opacity: 1;
			}
		}
	}
</style>
