---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import type { CollectionEntry } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import { locales, type AllowedLocales } from "@daliborhon.dev/integrations/astro-i18n";
import { getPathFromUrl } from "@daliborhon.dev/integrations/astro-i18n";
import { getBlogPostUrl } from "@utils/content";
import { getBlogPostTranslations } from "@utils/content";
import ISO6991 from "iso-639-1";

interface Props {
	post?: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const currentLocale = Astro.currentLocale!;
const capitalizeFirstLetter = (str: string) => {
	const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
	return capitalized;
};
const translations = post ? await getBlogPostTranslations(post) : [];
---

<lang-select>
	<select class="select select-sm select-bordered w-full max-w-xs">
		{
			!post &&
				locales.map((locale) => {
					// For whatever reason the getRelativeLocaleUrl() for path "/" always adds a trailing slash
					// even when it is not set in the config.
					const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url, import.meta.env.BASE_URL));
					const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
					const current = currentLocale === locale;

					return (
						<>
							<option selected={current} data-language={locale} value={value}>
								{nativeName}
							</option>
						</>
					);
				})
		}
		{
			post &&
				translations.map((post) => {
					const value = getBlogPostUrl(post.data.language as AllowedLocales, post);
					const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(post.data.language));
					const current = currentLocale === post.data.language;

					return (
						<>
							<option selected={current} data-language={post.data.language} value={value}>
								{nativeName}
							</option>
						</>
					);
				})
		}
	</select>
</lang-select>

<script>
	import { config, type AllowedLocales } from "@daliborhon.dev/integrations/astro-i18n";
	import { navigate } from "astro:transitions/client";
	import cookie from "js-cookie";
	import { Logger } from "@daliborhon.dev/integrations";

	class LanguageSelect extends HTMLElement {
		#logger = new Logger("language-select");

		connectedCallback() {
			const configCookie = config.localeCookie;
			const select = this.querySelector("select");

			if (!select) {
				this.#logger.error("Could not initialize LanguageSelect");
				return;
			}

			// Why does this happen?
			select.addEventListener("mousedown", (e) => {
				(e.target as HTMLSelectElement).focus({ preventScroll: true });
			});

			select.addEventListener("change", (e) => {
				e.preventDefault();

				if (e.currentTarget instanceof HTMLSelectElement) {
					const lang = e.currentTarget.options[e.currentTarget.selectedIndex].dataset.language! as AllowedLocales;
					cookie.set(configCookie.name, lang, { expires: configCookie.expDays });
					const next = e.currentTarget.value + window.location.search;
					this.#logger.info("Navigating to: " + next);
					navigate(next);
				}
			});
		}
	}
	customElements.define("lang-select", LanguageSelect);
</script>
