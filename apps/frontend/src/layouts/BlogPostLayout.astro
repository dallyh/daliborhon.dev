---
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import TagList from "@components/astro/blog/TagList.astro";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import Navigation from "@components/astro/global/Navigation.astro";
import PortableText from "@components/astro/global/PortableText/PortableText.astro";
import SearchMeta from "@components/astro/global/SearchMeta.astro";
import type { Post } from "@services/sanity/queries/posts";
import { Image } from "@unpic/astro";
import { getBlogPostDateTime, getCategoryUrl, getOgImageUrl } from "@utils";
import MainLayout from "./MainLayout.astro";

interface Props {
	post: Post;
}

const { post } = Astro.props;

const locale = Astro.currentLocale!;

const layoutProps = {
	title: `${m.blog__post()}: ${post?.title}`,
	author: "Dalibor Hon",
	description: post.headline ?? "",
	pubDateTime: post.publishedAt,
	modDatetime: post.updatedAt,
	ogImage: getOgImageUrl(locale, post, Astro.url),
};

const tagFilter = post.tags?.map((tag) => {
	return {
		name: m.blog__tags(),
		value: "#" + tag?.label!,
	};
});

const tags = post.tags
	?.map((tag) => {
		return "#" + tag?.label!;
	})
	.join(" ");

const searchProps = {
	title: layoutProps.title,
	description: layoutProps.description,
	date: getBlogPostDateTime(locale, layoutProps.pubDateTime, layoutProps.modDatetime).date,
	filter: [
		{
			name: m.blog__category(),
			value: post.categories[0].title,
		},
		...tagFilter!,
	],
	meta: [
		{
			name: m.blog__category(),
			value: post.categories[0].title!,
		},
		{
			name: m.blog__tags(),
			value: tags!,
		},
	],
	sort: [
		{
			name: "date",
			value: getBlogPostDateTime(locale, layoutProps.pubDateTime, layoutProps.modDatetime).date,
		},
	],
};
---

<MainLayout {...layoutProps}>
	<HeadHrefLangs post={post} slot="hreflangs" />
	<Navigation post={post} slot="header" />
	<SearchMeta {...searchProps} />
	<main>
		<div class="post-header">
			<BreadCrumbs>
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/")} label={m.common__home()} />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={m.blog__posts()} />
				<BreadCrumbsItem currentPage={true} label={post?.title!} />
			</BreadCrumbs>
			<div class="post-description">
				<div class="post-meta">
					<h1 class="gradient-text">{post?.title}</h1>
					<div class="meta-details">
						<p>By Dalibor Hon.</p>
						<FormattedDate pubDateTime={post.publishedAt} modDatetime={post.updatedAt} locale={locale} />
						{
							post.categories.map((category) => {
								return (
									<p>
										<a href={getCategoryUrl(locale, category)}>{category.title}</a>
									</p>
								);
							})
						}
					</div>
					<div class="tags">
						<TagList post={post} bgColor="rgba(var(--bg-color), 1)" justify="flex-start" padding="0" />
					</div>
				</div>
				<div class="post-image">
					<Image src={post.mainImage.asset.url} width={1200} height={630} title={post.title} alt={post.title!} loading="eager" transition:animate="slide" />
				</div>
			</div>
			<hr />
		</div>
		<article class="prose dark:prose-invert max-w-none">
			<PortableText value={post.body} headings={post.headings}  />
		</article>
	</main>
	<Footer />
</MainLayout>

<style>
	.post-header {
		hr {
			border-color: #374151;
			border-top-width: 1px;
			border-top-style: solid;
			margin-top: 2rem;
			margin-bottom: 2rem;
		}
	}

	.post-description {
		display: flex;
		justify-content: space-between;
		flex-wrap: wrap;
		align-items: center;

		@media (max-width: 768px) {
			flex-direction: column;
			gap: 1rem;
		}

		h1 {
			margin-bottom: 0.25rem;
		}

		.post-meta {
			@media (max-width: 768px) {
				display: flex;
				flex-direction: column;
				align-items: center;
				text-align: center;
			}
		}

		.meta-details {
			font-size: 0.85rem;
			color: var(--body-color);
			line-height: 1.5rem;
		}

		.post-image {
			overflow: hidden;
			max-width: 200px;
			transition: 0.3s ease;
			transform-origin: top right;

			@media (max-width: 768px) {
				align-self: center;
				max-width: calc(100vw - 20%);
			}

			@media (min-width: 768px) {
				&:hover {
					transform: scale(2.5);

					img {
						border: 1px solid rgba(var(--accent), 1);
					}
				}
			}

			img {
				border-radius: 6px;
				object-fit: cover;
				object-position: 50% 50%;
				box-shadow: var(--global-box-shadow);
				border: 1px solid transparent;
			}
		}
	}

	.tags {
		margin-top: 0.5rem;
	}
</style>
