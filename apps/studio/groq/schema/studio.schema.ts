/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  projectSourceUrl?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayTextValue>;
  projectTags?: Array<{
    title?: string;
    color?: Color;
    _key: string;
  }>;
  projectStartDate?: string;
  icon?: IconManager;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | ({
  _key: string;
} & Code) | ({
  _key: string;
} & IconManager)>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Array<{
    _key: string;
  } & InternationalizedArrayCategorySlugValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayTextValue>;
};

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<{
    _key: string;
  } & InternationalizedArrayReferenceValue>;
  schemaTypes?: Array<string>;
  slug?: Slug;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
  title?: string;
  headline?: string;
  slug?: Slug;
  publishedAt?: string;
  updatedAt?: string;
  featured?: boolean;
  tags?: Array<{
    _key: string;
  } & Tag>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: BlockContent;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type InternationalizedArrayReference = Array<{
  _key: string;
} & InternationalizedArrayReferenceValue>;

export type InternationalizedArrayCategorySlugValue = {
  _type: "internationalizedArrayCategorySlugValue";
  value?: Slug;
};

export type InternationalizedArrayTextValue = {
  _type: "internationalizedArrayTextValue";
  value?: string;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayCategorySlug = Array<{
  _key: string;
} & InternationalizedArrayCategorySlugValue>;

export type InternationalizedArrayText = Array<{
  _key: string;
} & InternationalizedArrayTextValue>;

export type InternationalizedArrayString = Array<{
  _key: string;
} & InternationalizedArrayStringValue>;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type IconManager = {
  _type: "icon.manager";
  icon?: string;
  metadata?: IconManagerMetadata;
};

export type IconManagerMetadata = {
  _type: "icon.manager.metadata";
  downloadUrl?: string;
  url?: string;
  inlineSvg?: string;
  collectionId?: string;
  collectionName?: string;
  iconName?: string;
  palette?: boolean;
  license?: IconManagerLicense;
  author?: IconManagerAuthor;
  size?: IconManagerSize;
  hFlip?: boolean;
  vFlip?: boolean;
  rotate?: number;
  color?: IconManagerColor;
};

export type IconManagerLicense = {
  _type: "icon.manager.license";
  name?: string;
  url?: string;
};

export type IconManagerAuthor = {
  _type: "icon.manager.author";
  name?: string;
  url?: string;
};

export type IconManagerSize = {
  _type: "icon.manager.size";
  width?: number;
  height?: number;
};

export type IconManagerColor = {
  _type: "icon.manager.color";
  hex?: string;
  rgba?: IconManagerColorRgba;
};

export type IconManagerColorRgba = {
  _type: "icon.manager.color.rgba";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Tags = Array<{
  _key: string;
} & Tag>;

export type Tag = {
  _type: "tag";
  value?: string;
  label?: string;
};
export declare const internalGroqTypeReferenceTo: unique symbol;

// Source: ./groq/queries.ts
// Variable: postQuery
// Query: *[_type == "post" && language == $language && _id == $id][0] {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type PostQueryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
} | null;
// Variable: allPostsQuery
// Query: *[_type == "post" && language == $language] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type AllPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: recentPostsQuery
// Query: *[_type == "post" && language == $language][0...$recentItems] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type RecentPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: allPostsByCategoryQuery
// Query: *[_type == "post" && language == $language && references($categoryId)] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type AllPostsByCategoryQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: allPostsByTagQuery
// Query: *[_type == "post" && language == $language && count(tags[value == $postTag]) > 0] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type AllPostsByTagQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: allFeaturedPostsQuery
// Query: *[_type == "post" && language == $language && featured == true] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type AllFeaturedPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: recentFeaturedPostsQuery
// Query: *[_type == "post" && language == $language && featured == true][0...$recentItems] | order(publishedAt desc) {        _id,    title,    slug,    language,    headline,    publishedAt,    updatedAt,    featured,    tags,    mainImage {          ...,    "width": asset->metadata.dimensions.width,    "height": asset->metadata.dimensions.width,    "blurHash": asset->metadata.blurHash,    "lqip": asset->metadata.lqip,    "url": asset->url,    "title": asset->title,    "description": asset->description,    "altText": asset->altText,    "extension": asset->extension    },    tags,    categories[]-> {          _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,    },    body,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      "slug": slug.current    }}
export type RecentFeaturedPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  language: string | null;
  headline: string | null;
  publishedAt: string | null;
  updatedAt: string | null;
  featured: boolean | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    width: number | null;
    height: number | null;
    blurHash: string | null;
    lqip: string | null;
    url: string | null;
    title: string | null;
    description: string | null;
    altText: string | null;
    extension: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: null;
    slug: null;
    description: null;
  }> | null;
  body: BlockContent | null;
  _translations: Array<{
    slug: string | null;
  } | null>;
}>;
// Variable: allUniqueTagsQuery
// Query: {  "tags": array::unique(    *[tags != null].tags[].label  )}
export type AllUniqueTagsQueryResult = {
  tags: unknown;
};
// Variable: categoryQuery
// Query: *[_type == "category" && _id == $id][0] {        _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,}
export type CategoryQueryResult = {
  _id: string;
  title: null;
  slug: null;
  description: null;
} | null;
// Variable: allCategoriesQuery
// Query: *[_type == "category"] | order(title[_key == $language][0].value desc) {        _id,    "title": title[_key == $language][0].value,    "slug": slug[_key == $language][0].value,    "description": description[_key == $language][0].value,}
export type AllCategoriesQueryResult = Array<{
  _id: string;
  title: null;
  slug: null;
  description: null;
}>;
// Variable: projectQuery
// Query: *[_type == "project" && _id == $id][0] {        _id,    "title": title[_key == $language][0].value,    "description": description[_key == $language][0].value,    projectStartDate,    projectSourceUrl,    projectTags,    icon {      icon,      metadata {        size,        collectionId,        inlineSvg,        color      }    },}
export type ProjectQueryResult = {
  _id: string;
  title: null;
  description: null;
  projectStartDate: string | null;
  projectSourceUrl: string | null;
  projectTags: Array<{
    title?: string;
    color?: Color;
    _key: string;
  }> | null;
  icon: {
    icon: string | null;
    metadata: {
      size: IconManagerSize | null;
      collectionId: string | null;
      inlineSvg: string | null;
      color: IconManagerColor | null;
    } | null;
  } | null;
} | null;
// Variable: allProjectsQuery
// Query: *[_type == "project"] | order(projectStartDate desc) {        _id,    "title": title[_key == $language][0].value,    "description": description[_key == $language][0].value,    projectStartDate,    projectSourceUrl,    projectTags,    icon {      icon,      metadata {        size,        collectionId,        inlineSvg,        color      }    },}
export type AllProjectsQueryResult = Array<{
  _id: string;
  title: null;
  description: null;
  projectStartDate: string | null;
  projectSourceUrl: string | null;
  projectTags: Array<{
    title?: string;
    color?: Color;
    _key: string;
  }> | null;
  icon: {
    icon: string | null;
    metadata: {
      size: IconManagerSize | null;
      collectionId: string | null;
      inlineSvg: string | null;
      color: IconManagerColor | null;
    } | null;
  } | null;
}>;

