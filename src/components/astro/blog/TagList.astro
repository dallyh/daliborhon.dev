---
import { getLocale } from "@i18n/utils";
import type { IGenBlogArticleMetaFragment, IGenTagFragment } from "@services/graphql/__generated/sdk";
import { getTagByLocale } from "@utils";
import { type CollectionEntry } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";

interface Props {
    post?: IGenBlogArticleMetaFragment;
    tags?: IGenTagFragment[];
    bgColor: string;
    useTagColor?: boolean;
    justify: string;
    padding?: string;
}

const { post, bgColor, justify, tags, useTagColor = false, padding = "0.5rem" } = Astro.props;
const locale = getLocale(Astro.url);
---

<ul class="tag-list">
    {
        tags &&
            tags.map((tag) => (
                <li>
                    <a style={useTagColor ? `background: ${tag?.color}` : ""} href={getRelativeLocaleUrl(locale, `/blog/tags/${tag.name}/`)}>#{tag.name}</a>
                </li>
            ))
    }
    {
        post &&
            post.tags?.map(async (tag) => {
                return (
                    <li>
                        <a style={useTagColor ? `background: ${tag?.color}` : ""} href={getRelativeLocaleUrl(locale, `/blog/tags/${tag?.name}/`)}>#{tag?.name}</a>
                    </li>
                );
            })
    }
</ul>

<style define:vars={{ bgColor, justify, padding }}>
    .tag-list {
        display: flex;
        gap: 0.3rem;
        flex-wrap: wrap;
        justify-content: var(--justify);
        text-align: center;

        li {
            a {
                display: inline-block;
                background: var(--bgColor);
                border-radius: 6px;
                font-size: 0.8rem;
                padding: var(--padding);
                position: relative;

                &:visited {
                    color: var(--a-color);
                }

                &:hover {
                    text-decoration: none;
                    top: -2px;
                }
            }
        }
    }
</style>
