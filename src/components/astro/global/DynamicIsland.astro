---
import { Icon } from "astro-icon/components";
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import type { AllowedLocales } from "@i18n/config";

const locale = Astro.currentLocale as AllowedLocales;
const hasDynamicIsland = (await Astro.slots.render("dynamic-island")).length !== 0;
---

<div class="dynamic-island-container" id="dynamicIsland">
    <div class="brand-loader" id="pageNavLoader">
        <a class="gradient-text-static" href={getRelativeLocaleUrl(locale, "/")} title={m.common__home()} aria-label={m.common__home()}>
            <Icon class="logo" name="dh-logo" size={40} />
        </a>
        <div class="spinner-wrapper">
            <svg class="spinner" viewBox="0 0 50 50">
                <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
            </svg>
        </div>
    </div>
    {
        hasDynamicIsland && (
            <div class="dynamic-island">
                <slot name="dynamic-island" />
            </div>
        )
    }
</div>

<script is:inline>
    document.addEventListener("astro:before-preparation", () => {
        document.getElementById("pageNavLoader").classList.add("spin");
    });
    document.addEventListener("astro:after-preparation", () => {
        document.getElementById("pageNavLoader").classList.remove("spin");
    });
    document.addEventListener("astro:page-load", () => {
        const island = document.getElementById("dynamicIsland").classList.add("show");
    });
</script>

<style>
    .dynamic-island-container {
        display: flex;
        gap: 0rem;
        place-content: center;
        height: 40px;
        transition: flex-grow 1000ms linear;
        flex-grow: 0.00001;

        &.show {
            flex-grow: 1;

            .dynamic-island {
                display: block;
                visibility: visible;
                animation: showIsland 0.4s ease forwards 0.4s;
            }
        }
    }

    .dynamic-island {
        height: inherit;
        max-width: 0;
        display: none;
        transform: scale(0);
        overflow: hidden;
        visibility: hidden;
    }

    @keyframes showIsland {
        0% {
            max-width: 0;
            transform: scale(0);
        }

        50% {
            max-width: 100px;
            transform: scale(0);
        }

        100% {
            margin-left: 1rem;
            max-width: 100px;
            transform: scale(1);
        }
    }

    .brand-loader {
        color: rgba(var(--accent), 1);
        width: 40px;
        height: inherit;
        position: relative;

        .logo {
            width: inherit;
            height: inherit;
            /* animation-delay: 2s; */
            animation-fill-mode: both;
            animation-duration: 0.4s;
        }

        &.spin {
            .spinner-wrapper {
                animation-name: grow;
            }

            .logo {
                animation-name: shrink;
            }
        }
    }

    .spinner-wrapper {
        position: absolute;
        left: 0;
        top: 0;
        width: inherit;
        height: inherit;
        transform: scale(0);
        /* animation-delay: 2s; */
        animation-fill-mode: both;
        animation-duration: 0.4s;

        .spinner {
            animation: rotate 2s linear infinite;
            width: inherit;
            height: inherit;

            .path {
                stroke: rgba(var(--accent), 1);
                stroke-linecap: round;
                animation: dash 1.5s ease-in-out infinite;
            }
        }
    }

    @keyframes shrink {
        to {
            transform: scale(0);
        }
    }

    @keyframes grow {
        to {
            transform: scale(1);
        }
    }

    @keyframes rotate {
        100% {
            transform: rotate(360deg);
        }
    }

    @keyframes dash {
        0% {
            stroke-dasharray: 1, 150;
            stroke-dashoffset: 0;
        }
        50% {
            stroke-dasharray: 90, 150;
            stroke-dashoffset: -35;
        }
        100% {
            stroke-dasharray: 90, 150;
            stroke-dashoffset: -124;
        }
    }
</style>
