---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import { locales } from "@config/i18n";
import { loadNamespaces } from "@i18n/i18n";
import { getLocale, getPathFromUrl } from "@i18n/utils";
import { getBlogPostByIdAndLocale } from "@utils/getBlogPostByIdAndLocale";
import { getBlogPostUrl } from "@utils/getBlogPostUrl";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import ISO6991 from "iso-639-1";

interface Props {
    post?: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const currentLocale = getLocale(Astro.url);
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};

await loadNamespaces(currentLocale, ["common"]);
---

<lang-select>
    <label>
        <Icon name="bi:translate" size={18} />
        <select>
            {
                !post &&
                    locales.map((locale) => {
                        const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url));
                        const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                        const current = currentLocale === locale;

                        return (
                            <>
                                <option selected={current} data-language={locale} value={value}>
                                    {nativeName}
                                </option>
                            </>
                        );
                    })
            }

            {
                post &&
                    locales.map(async (locale) => {
                        const currentPost = await getBlogPostByIdAndLocale(locale, post.data.postId);
                        const value = getBlogPostUrl(locale, currentPost);
                        const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                        const current = currentLocale === locale;

                        return (
                            <>
                                <option selected={current} data-language={locale} value={value}>
                                    {nativeName}
                                </option>
                            </>
                        );
                    })
            }
        </select>
    </label>
</lang-select>

<style>
    lang-select {
        display: contents;
    }

    label {
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        pointer-events: all;
        position: relative;

        svg {
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-60%);
            pointer-events: none;
        }

        @media (max-width: 768px) {
            svg {
                left: 50%;
                transform: translateY(-60%) translateX(-50%);
            }
        }

        select {
            border: 0;
            padding-left: 1.7rem;
            padding-right: 0.8rem;
            padding-top: 0.25rem;
            padding-bottom: 0.25rem;
            background-color: transparent;
            text-overflow: ellipsis;
            color: inherit;
            appearance: none;
            line-height: 1.2;
            border-radius: 6px;

            @media (max-width: 768px) {
                width: 0;
                padding: 0.5rem;
            }

            &:focus-visible {
                box-shadow: var(--focus-visible-shadow);
            }
        }

        &::after {
            content: "";
            position: absolute;
            top: 50%;
            right: 0.2rem;
            display: inline-block;
            border-bottom: 2px solid var(--body-color);
            border-right: 2px solid var(--body-color);
            height: 6px;
            width: 6px;
            transform: rotate(45deg) translateY(-85%);
            pointer-events: none;

            @media (max-width: 768px) {
                display: none;
            }
        }

        &:hover,
        &:focus-within {
            color: rgba(var(--accent), 1);

            &::after {
                border-bottom: 2px solid rgba(var(--accent), 1);
                border-right: 2px solid rgba(var(--accent), 1);
            }
        }

        option {
            background-color: rgba(var(--secondary), 1);
            color: var(--body-color);
            padding: 1rem;
            text-overflow: ellipsis;
        }
    }
</style>

<script>
    import { navigate } from "astro:transitions/client";
    class LanguageSelect extends HTMLElement {
        constructor() {
            super();
            const select = this.querySelector("select");
            if (select) {
                select.addEventListener("change", (e) => {
                    if (e.currentTarget instanceof HTMLSelectElement) {
                        const lang = e.currentTarget.options[e.currentTarget.selectedIndex].dataset.language!;
                        window.localStorage.setItem("language", lang);

                        navigate(e.currentTarget.value);
                    }
                });
            }
        }
    }
    customElements.define("lang-select", LanguageSelect);
</script>
