---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import { getLocale, getPathFromUrl } from "@i18n/utils";
import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";
import { locales } from "@i18n/config";
import { getRelativeLocaleUrl } from "astro:i18n";
import type { CollectionEntry } from "astro:content";
import { getBlogPostByIdAndLocale } from "@utils/getBlogPostByIdAndLocale";
import { getBlogPostUrl } from "@utils/getBlogPostUrl";

interface Props {
    showFlag?: boolean;
    showTitle?: boolean;
    placement?: string;
    buttonId: string;
    dropdownId: string;
    post?: CollectionEntry<"posts">;
}

const { showFlag = false, showTitle = true, placement = "bottom", dropdownId, buttonId, post } = Astro.props;

const currentLocale = getLocale(Astro.url);
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};
---

<div class="language-selector">
    <button class:list={["dropdown dropdown-button"]} data-dropdown-target={`#${dropdownId}`} data-dropdown-placement={placement} id={buttonId}>
        <i class="bi bi-translate"></i>
        {(showFlag ? localeEmoji(currentLocale) + " " : "") + (showTitle ? capitalizeFirstLetter(ISO6991.getNativeName(currentLocale)) : "")}
    </button>
    <ul class="dropdown-content" id={dropdownId} data-js-current-language={currentLocale}>
        {
            !post &&
                locales.map((locale) => {
                    const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url));
                    const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                    const flag = showFlag ? localeEmoji(locale) + " " : "";
                    const label = flag + nativeName;

                    return (
                        <li>
                            <a href={value} data-js-language={locale} class={locale == currentLocale ? "active" : ""}>
                                <span>{label}</span>
                                <i class={locale == currentLocale ? "bi bi-check" : ""} aria-hidden="true" />
                            </a>
                        </li>
                    );
                })
        }

        {
            post &&
                locales.map(async (locale) => {
                    const currentPost = await getBlogPostByIdAndLocale(locale, post.data.postId);
                    const value = getBlogPostUrl(locale, currentPost);
                    const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                    const flag = showFlag ? localeEmoji(locale) + " " : "";
                    const label = flag + nativeName;

                    return (
                        <li>
                            <a href={value} data-js-language={locale} class={locale == currentLocale ? "active" : ""}>
                                <span>{label}</span>
                                <i class={locale == currentLocale ? "bi bi-check" : ""} aria-hidden="true" />
                            </a>
                        </li>
                    );
                })
        }
    </ul>
</div>

<script>
    const languageSelector = document.querySelectorAll("[data-js-language]");
    languageSelector.forEach((selector) => {
        selector.addEventListener("click", function (e) {
            let currectSelector = e.target as HTMLAnchorElement;
            let selectedLanguage = currectSelector.getAttribute("data-js-language");
            if (selectedLanguage === null) {
                console.error("Could not find 'data-js-language' attribute.");
                return;
            }
            window.localStorage.setItem("language", selectedLanguage);
        });
    });
</script>

<style>
    span,
    i {
        pointer-events: none;
    }

    a.active {
        font-weight: 700;
    }

    .language-selector {
        display: flex;
        justify-content: center;
        position: relative;
    }
</style>
