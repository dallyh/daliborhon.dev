---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import type { CollectionEntry } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import { languageTag } from "$paraglide-runtime";
import { locales } from "@i18n-config";
import { getPathFromUrl } from "@i18n/utils";
import { getBlogPostUrl } from "@utils/content";
import { getBlogPostTranslations } from "@utils/content";
import ISO6991 from "iso-639-1";

interface Props {
	post?: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const currentLocale = languageTag();
const capitalizeFirstLetter = (str: string) => {
	const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
	return capitalized;
};
const translations = post ? await getBlogPostTranslations(post) : [];
---

<lang-select>
	<div class="field">
		<p class="control has-icons-left">
			<span class="select is-small">
				<select>
					{
						!post &&
							locales.map((locale) => {
								// For whatever reason the getRelativeLocaleUrl() for path "/" always adds a trailing slash
								// even when it is not set in the config.
								const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url));
								const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
								const current = currentLocale === locale;

								return (
									<>
										<option selected={current} data-language={locale} value={value}>
											{nativeName}
										</option>
									</>
								);
							})
					}
					{
						post &&
							translations.map((post) => {
								const value = getBlogPostUrl(post.data.language, post);
								const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(post.data.language));
								const current = currentLocale === post.data.language;

								return (
									<>
										<option selected={current} data-language={post.data.language} value={value}>
											{nativeName}
										</option>
									</>
								);
							})
					}
				</select>
			</span>
			<span class="icon is-small is-left">
				<i class="fas fa-globe"></i>
			</span>
		</p>
	</div>
</lang-select>

<script>
	import { setLanguageTag } from "$paraglide-runtime";
	import type { AllowedLocales } from "@i18n-config";
	import { siteConfig } from "@site-config";
	import { navigate } from "astro:transitions/client";
	import cookie from "js-cookie";

	const configCookie = siteConfig.i18n.localeCookie;

	class LanguageSelect extends HTMLElement {
		connectedCallback() {
			const select = this.querySelector("select");

			if (!select) {
				console.error("Could not initialize LanguageSelect");
				return;
			}

			select.addEventListener("change", (e) => {
				if (e.currentTarget instanceof HTMLSelectElement) {
					const lang = e.currentTarget.options[e.currentTarget.selectedIndex].dataset.language! as AllowedLocales;
					cookie.set(configCookie.name, lang, { expires: configCookie.expDays });
					setLanguageTag(lang); // Do not delete this, has to be done on the client also

					const next = e.currentTarget.value + window.location.search;
					navigate(next);
				}
			});
		}
	}
	customElements.define("lang-select", LanguageSelect);
</script>
