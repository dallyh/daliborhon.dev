---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import { getLocale, getPathFromUrl } from "@i18n/utils";
import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";
import { locales } from "@config/i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
import type { CollectionEntry } from "astro:content";
import { getBlogPostByIdAndLocale } from "@utils/getBlogPostByIdAndLocale";
import { getBlogPostUrl } from "@utils/getBlogPostUrl";
import { loadNamespaces, t } from "@i18n/i18n";

interface Props {
    post?: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const currentLocale = getLocale(Astro.url);
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};

await loadNamespaces(currentLocale, ["common"]);
---

<lang-select>
    <label class="">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z"></path>
            <path
                d="M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z"
            ></path>
        </svg>
        <select class="">
            {
                !post &&
                    locales.map((locale) => {
                        const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url));
                        const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                        const current = currentLocale === locale;

                        return (
                            <>
                                <option selected={current} data-js-language={locale} value={value}>
                                    {nativeName}
                                </option>
                            </>
                        );
                    })
            }

            {
                post &&
                    locales.map(async (locale) => {
                        const currentPost = await getBlogPostByIdAndLocale(locale, post.data.postId);
                        const value = getBlogPostUrl(locale, currentPost);
                        const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                        const current = currentLocale === locale;

                        return (
                            <>
                                <option selected={current} data-js-language={locale} value={value}>
                                    {nativeName}
                                </option>
                            </>
                        );
                    })
            }
        </select>
    </label>
</lang-select>

<style>
    label {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        pointer-events: all;
        position: relative;

        svg {
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

        select {
            border: 0;
            padding-block: 1rem;
            padding-inline: 1.8rem 0.9rem;
            width: var(--sl-select-width);
            background-color: transparent;
            text-overflow: ellipsis;
            color: inherit;
            appearance: none;
        }

        &::after {
            content: "";
            position: absolute;
            top: 50%;
            right: 0;
            display: inline-block;
            border-bottom: 2px solid var(--body-color);
            border-right: 2px solid var(--body-color);
            height: 8px;
            width: 8px;
            transform: rotate(45deg) translateY(-70%);
        }

        &:hover {
            color: rgba(var(--accent), 1);

            &::after {
                border-bottom: 2px solid rgba(var(--accent), 1);
                border-right: 2px solid rgba(var(--accent), 1);
            }
        }

        option {
            background-color: rgba(var(--secondary), 1);
            color: var(--body-color);
            padding: 1rem;
        }
    }
</style>

<script>
    import { navigate } from "astro:transitions/client";
    class StarlightLanguageSelect extends HTMLElement {
        constructor() {
            super();
            const select = this.querySelector("select");
            if (select) {
                select.addEventListener("change", (e) => {
                    if (e.currentTarget instanceof HTMLSelectElement) {
                        navigate(e.currentTarget.value);
                    }
                });
            }
        }
    }
    customElements.define("lang-select", StarlightLanguageSelect);
</script>
