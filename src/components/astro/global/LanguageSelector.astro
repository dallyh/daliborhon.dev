---
// Credits: https://github.com/yassinedoghri/astro-i18next/blob/beta/src/components/LanguageSelector.astro
// Edited for this project needs.

import { getLocale, getPathFromUrl } from "@i18n/utils";
import localeEmoji from "locale-emoji";
import ISO6991 from "iso-639-1";
import { locales } from "@config/i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
import type { CollectionEntry } from "astro:content";
import { getBlogPostByIdAndLocale } from "@utils/getBlogPostByIdAndLocale";
import { getBlogPostUrl } from "@utils/getBlogPostUrl";

interface Props {
    showFlag?: boolean;
    showTitle?: boolean;
    placement?: string;
    buttonId: string;
    dropdownId: string;
    post?: CollectionEntry<"posts">;
}

const { showFlag = false, showTitle = true, placement = "bottom", dropdownId, buttonId, post } = Astro.props;

const currentLocale = getLocale(Astro.url);
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};
---

<div class="language-selector">
    <button class:list={["dropdown dropdown-button"]} data-dropdown-target={`#${dropdownId}`} data-dropdown-placement={placement} id={buttonId}>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-translate" viewBox="0 0 16 16">
            <path d="M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z"></path>
            <path
                d="M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z"
            ></path>
        </svg>
        {(showFlag ? localeEmoji(currentLocale) + " " : "") + (showTitle ? capitalizeFirstLetter(ISO6991.getNativeName(currentLocale)) : "")}
    </button>
    <ul class="dropdown-content" id={dropdownId} data-js-current-language={currentLocale}>
        {
            !post &&
                locales.map((locale) => {
                    const value = getRelativeLocaleUrl(locale, getPathFromUrl(Astro.url));
                    const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                    const flag = showFlag ? localeEmoji(locale) + " " : "";
                    const label = flag + nativeName;

                    return (
                        <li>
                            <a href={value} data-js-language={locale} class={locale == currentLocale ? "active" : ""}>
                                <span>{label}</span>
                                <i class={locale == currentLocale ? "bi bi-check" : ""} aria-hidden="true" />
                            </a>
                        </li>
                    );
                })
        }

        {
            post &&
                locales.map(async (locale) => {
                    const currentPost = await getBlogPostByIdAndLocale(locale, post.data.postId);
                    const value = getBlogPostUrl(locale, currentPost);
                    const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(locale));
                    const flag = showFlag ? localeEmoji(locale) + " " : "";
                    const label = flag + nativeName;

                    return (
                        <li>
                            <a href={value} data-js-language={locale} class={locale == currentLocale ? "active" : ""}>
                                <span>{label}</span>
                                <i class={locale == currentLocale ? "bi bi-check" : ""} aria-hidden="true" />
                            </a>
                        </li>
                    );
                })
        }
    </ul>
</div>

<script>
    const languageSelector = document.querySelectorAll("[data-js-language]");
    languageSelector.forEach((selector) => {
        selector.addEventListener("click", function (e) {
            let currectSelector = e.target as HTMLAnchorElement;
            let selectedLanguage = currectSelector.getAttribute("data-js-language");
            if (selectedLanguage === null) {
                console.error("Could not find 'data-js-language' attribute.");
                return;
            }
            window.localStorage.setItem("language", selectedLanguage);
        });
    });
</script>

<style>
    span,
    i {
        pointer-events: none;
    }

    a.active {
        font-weight: 700;
    }

    .language-selector {
        display: flex;
        justify-content: center;
        position: relative;
    }
</style>
