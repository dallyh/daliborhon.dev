---
import * as m from "$messages";
import type { MarkdownHeading } from "astro";
import type { RenderResult } from "astro:content";

interface Props {
	tocPosition?: "inside" | "default";
	headings?: MarkdownHeading[];
	render?: () => Promise<RenderResult>;
}

const { tocPosition = "default", render, headings } = Astro.props;
---

<article class=`content md-content ${tocPosition}` id="content">
	{
		!render && headings && headings.length !== 0 && (
			<>
				<div id="toc" class="box">
					<details id="tocDetails" open={tocPosition === "inside" ? true : false}>
						<h2>{m.blog__toc()}</h2>
						<summary>{m.blog__open_toc}</summary>
					</details>
				</div>
			</>
		)
	}
	{
		!render && (
			<div>
				<slot name="content" />
			</div>
		)
	}
	{
		render &&
			(async () => {
				const { Content, headings } = await render();

				return (
					<>
						{headings.length !== 0 && (
							<div id="toc" class="box">
								<details id="tocDetails" open={tocPosition === "inside"}>
									<h2>{m.blog__toc()}</h2>
									<summary>{m.blog__open_toc}</summary>
								</details>
							</div>
						)}
						<div>
							<Content />
						</div>
					</>
				);
			})
	}
</article>

<script>
	/**
	 * Wraps TOC generated by rehype-toc in details element
	 * This needs to be done because of i18n
	 */
	const wrapToc = () => {
		const details = document.querySelector<HTMLHeadElement>("#tocDetails");

		if (details === null) {
			return;
		}

		const toc = document.querySelector<HTMLElement>(".toc")!;
		details.appendChild(toc);

		toc.style.display = "block";
	};

	wrapToc();

	document.addEventListener("astro:after-swap", () => {
		wrapToc();
	});
</script>

<style>
	.content {
		position: relative;
		width: 100%;
	}

	@media screen and (min-width: 1024px) {
		.content {
			&.inside {
				display: flex;
				flex-direction: row-reverse;
				gap: 2rem;

				.box {
					padding: 0;
					position: sticky;
					top: calc(var(--bulma-navbar-height) + 0.5rem); /* Navbar */
					min-width: 250px;
					box-shadow: none;
					max-height: max-content;
				}
			}
		}
	}
</style>

<style is:global>
	nav .toc {
		display: none; /* This is generated */
	}

	#toc {
		z-index: 2;

		summary::marker,
		summary::-webkit-details-marker {
			display: none;
		}

		summary:before {
			content: "";
			border-width: 0.4rem;
			border-style: solid;
			border-color: transparent transparent transparent var(--bulma-text);
			position: absolute;
			top: 0.35rem;
			left: 0rem;
			transform: rotate(0);
			transform-origin: 0.2rem 50%;
			transition: 0.25s transform ease;
		}

		details[open] > summary:before {
			transform: rotate(90deg);
		}

		details[open] > summary {
			margin-bottom: 1rem;
		}

		summary {
			padding-left: 1rem;
			position: relative;
			cursor: pointer;
			list-style: none;

			&:focus {
				outline: none;
				border-color: hsl(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l)) !important;
				box-shadow: var(--bulma-focus-shadow-size) hsla(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l), var(--bulma-focus-shadow-alpha)) !important;
			}
		}
	}
</style>
