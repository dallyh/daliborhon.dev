---
import { getLocale } from "@i18n/utils";
import { loadNamespaces, t } from "@i18n/i18n";
import LanguageSelector from "./LanguageSelector.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import type { CollectionEntry } from "astro:content";
import Search from "./Search.astro";
import { Icon } from "astro-icon/components";
import ThemeSelect from "./ThemeSelect.astro";

interface Props {
    title: string;
    homePage?: boolean;
    post?: CollectionEntry<"posts">;
}

const { homePage = false, title, post } = Astro.props;

// i18next
const locale = getLocale(Astro.url);
await loadNamespaces(locale, ["common", "blog"]);
---

<site-nav>
    <header id="nav-menu" aria-label="navigation bar">
        <div class="container">
            <div class="nav-start">
                <div class="brand">
                    <div class="brand-logo text-gradient">
                        <Icon name="dh-logo" size={40} />
                    </div>
                </div>
                <nav class="menu">
                    <ul class="menu-bar">
                        <li><a class="nav-link" href={getRelativeLocaleUrl(locale, "/home")}>{t("common.home")}</a></li>
                        <li><a class="nav-link" href={getRelativeLocaleUrl(locale, "/resume")}>{t("common.resume")}</a></li>
                        <li>
                            {
                                homePage && (
                                    <a class="nav-link" href="#contact">
                                        {t("common.contact")}
                                    </a>
                                )
                            }
                            {
                                !homePage && (
                                    <a class="nav-link" href={getRelativeLocaleUrl(locale, "/contact")}>
                                        {t("common.contact")}
                                    </a>
                                )
                            }
                        </li>
                        <li><a class="nav-link" href={getRelativeLocaleUrl(locale, "/projects")}>{t("projects.projects")}</a></li>
                        <li>
                            <button class="nav-link dropdown-btn" data-dropdown="blogDropdown" aria-haspopup="true" aria-expanded="false" aria-label={t("common.blog")}>
                                {t("common.blog")}
                            </button>
                            <div id="blogDropdown" class="dropdown">
                                <ul role="menu">
                                    <li>
                                        <span class="dropdown-link-title">Browse Posts</span>
                                    </li>
                                    <li role="menuitem">
                                        <a class="dropdown-link" href={getRelativeLocaleUrl(locale, "/blog")}>{t("blog.posts")}</a>
                                    </li>
                                    <li role="menuitem">
                                        <a class="dropdown-link" href={getRelativeLocaleUrl(locale, "/blog/posts/")}>{t("blog.all_posts_title")}</a>
                                    </li>
                                    <li role="menuitem">
                                        <a class="dropdown-link" href={getRelativeLocaleUrl(locale, "/blog/posts/featured")}>{t("blog.featured_posts_title")}</a>
                                    </li>
                                </ul>
                                <ul role="menu">
                                    <li>
                                        <span class="dropdown-link-title">Explore</span>
                                    </li>
                                    <li role="menuitem">
                                        <a class="dropdown-link" href={getRelativeLocaleUrl(locale, "/blog/categories")}>{t("blog.categories")}</a>
                                    </li>
                                    <li role="menuitem">
                                        <a class="dropdown-link" href={getRelativeLocaleUrl(locale, "/blog/tags")}>{t("blog.tags")}</a>
                                    </li>
                                </ul>
                            </div>
                        </li>
                    </ul>
                </nav>
            </div>
            <div class="nav-end">
                <div class="right-container">
                    <Search />
                    <LanguageSelector post={post} />
                    <ThemeSelect />
                    <button id="hamburger" aria-label="hamburger" aria-haspopup="true" aria-expanded="false">
                        <i><Icon name="bi:list" size={19} /></i>
                    </button>
                </div>
            </div>
        </div>
    </header>
</site-nav>

<style>
    .brand {
        color: rgba(var(--accent), 1);
        display: flex;
        align-items: center;
        font-weight: 700;
        height: var(--header-height);

        .brand-logo {
            margin-right: 6px;
            margin-left: 2px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        h1 {
            font-size: 1rem;
            font-weight: inherit;
            padding: 0;
            margin: 0;
            background: none;
            background-clip: none;
            color: inherit;
        }
    }

    header {
        width: 100%;
        color: var(--body-color);
        font-weight: 500;
        position: fixed;
        top: 0;
        background: var(--header-bg);
        backdrop-filter: blur(16px);
        z-index: 1010;
        transition: background 0.4s ease;
        height: var(--header-height);
        border-bottom: var(--border);
    }

    .container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        column-gap: 2rem;
        max-width: var(--page-width);
        padding-left: var(--padding-x);
        padding-right: var(--padding-x);
        margin: auto;
        width: 100%;
        height: 100%;
    }

    .menu {
        position: relative;
        margin: auto;
    }

    .menu-bar li:first-child .dropdown {
        flex-direction: initial;
        min-width: 480px;
    }

    .menu-bar li:first-child ul:nth-child(1) {
        border-right: var(--border);
    }

    .menu-bar li:nth-child(n + 2) ul:nth-child(1) {
        border-bottom: var(--border);
    }

    .menu-bar .dropdown-link-title {
        font-weight: 600;
    }

    .menu-bar .nav-link {
        font-size: 1rem;
        font-weight: 500;
        letter-spacing: -0.6px;
        padding: 0.3rem;
        min-width: 60px;
        margin: 0 0.6rem;
        color: var(--body-color);
    }

    .menu-bar .nav-link:hover,
    .menu-bar .nav-link:focus-visible,
    .dropdown-link:hover,
    .dropdown-link:focus-visible,
    .menu-bar .nav-link[aria-expanded="true"] {
        color: rgba(var(--accent), 1);
        text-decoration: none;
        cursor: pointer;

        &::after {
            border-bottom: 2px solid rgba(var(--accent), 1);
            border-right: 2px solid rgba(var(--accent), 1);
        }
    }

    .nav-start,
    .nav-end,
    .menu-bar,
    .right-container {
        display: flex;
        align-items: center;
    }

    .dropdown {
        display: flex;
        flex-direction: column;
        min-width: 230px;
        background-color: rgba(var(--secondary), 1);
        border-radius: 10px;
        position: absolute;
        top: 36px;
        z-index: 1020;
        visibility: hidden;
        opacity: 0;
        transform: scale(0.97) translateX(-5px);
        transition: 0.1s ease-in-out;
        box-shadow: var(--global-box-shadow);
        border: var(--border);
    }

    .dropdown.active {
        visibility: visible;
        opacity: 1;
        transform: scale(1) translateX(5px);
    }

    .dropdown ul {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        padding: 1.2rem;
        font-size: 0.95rem;
    }

    .dropdown-btn {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;

        &::after {
            content: "";
            display: inline-block;
            border-bottom: 2px solid var(--body-color);
            border-right: 2px solid var(--body-color);
            height: 8px;
            width: 8px;
            transform: rotate(45deg);
            margin-left: 0.2rem;
        }
    }

    .dropdown-link {
        display: flex;
        gap: 0.5rem;
        padding: 0.5rem 0;
        border-radius: 7px;
        transition: 0.1s ease-in-out;
    }

    .dropdown-link p {
        font-size: 0.8rem;
    }

    .right-container {
        display: flex;
        align-items: center;
        column-gap: 1rem;
        padding: 0.5rem;
    }

    #hamburger {
        display: none;
        border-radius: 6px;
        cursor: pointer;
        padding: 0.5rem;
        margin-left: -0.5rem;

        svg {
            /* This is ugly :( */
            transform: scale(1.4);
        }

        &:hover,
        &:focus-visible {
            color: rgba(var(--accent), 1);
        }
    }

    @media (max-width: 768px) {
        :global(body.nav-active) {
            header {
                background: rgba(var(--secondary), 1);
            }
        }

        #hamburger {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .menu {
            position: fixed;
            top: var(--header-height);
            left: 0;
            height: calc(100svh - var(--header-height));
            width: 100vw;
            background: rgba(var(--secondary), 1);
            backdrop-filter: blur(4px);
            transform: translateX(-100%);
            transition: 0.4s ease-in-out;
            overflow-y: scroll;
            overflow-x: hidden;
        }

        .menu-bar li:first-child ul:nth-child(1) {
            border-right: none;
            border-bottom: var(--border);
        }

        .dropdown {
            display: none;
            min-width: 100%;
            border: none !important;
            border-radius: 5px;
            position: static;
            top: 0;
            left: 0;
            visibility: visible;
            opacity: 1;
            transform: none;
            box-shadow: none;
            background: transparent;
        }

        :global(body.nav-active) {
            .menu {
                transform: translateX(0);
            }

            .nav-end {
                transition: 0.4s ease;
                background-color: var(--header-bg);
                border-radius: 6px;
            }
        }

        .dropdown.active {
            display: block;
        }

        .dropdown ul {
            padding-left: 0.3rem;
        }

        .menu-bar {
            display: flex;
            flex-direction: column;
            align-items: stretch;
            row-gap: 1rem;
            padding: 1rem;
        }

        .menu-bar .nav-link {
            display: flex;
            justify-content: space-between;
            width: 100%;
            font-weight: 600;
            font-size: 1.2rem;
            margin: 0;
        }

        .menu-bar li:first-child .dropdown {
            min-width: 100%;
        }

        .menu-bar > li:not(:last-child) {
            padding-bottom: 0.5rem;
            border-bottom: var(--border);
        }
    }
</style>

<script>
    class Navigation extends HTMLElement {
        constructor() {
            super();
            const dropdownBtn = this.querySelectorAll<HTMLButtonElement>(".dropdown-btn");
            const dropdown = this.querySelectorAll(".dropdown");
            const hamburgerBtn = this.querySelector<HTMLButtonElement>("#hamburger")!;
            const navMenu = this.querySelector<HTMLUListElement>(".menu");
            const links = this.querySelectorAll(".dropdown a") as NodeListOf<HTMLAnchorElement>;

            function setAriaExpandedFalse() {
                dropdownBtn.forEach((btn) => btn.setAttribute("aria-expanded", "false"));
            }

            function closeDropdownMenu() {
                dropdown.forEach((drop) => {
                    drop.classList.remove("active");
                    drop.addEventListener("click", (e) => e.stopPropagation());
                });
            }

            function toggleHamburger() {
                document.body.classList.toggle("nav-active");
            }

            dropdownBtn.forEach((btn) => {
                btn.addEventListener("click", function (e) {
                    const dropdownIndex = (e.target as HTMLButtonElement).dataset.dropdown!;
                    const dropdownElement = document.getElementById(dropdownIndex)!;

                    dropdownElement.classList.toggle("active");
                    dropdown.forEach((drop) => {
                        if (drop.id !== btn.dataset["dropdown"]) {
                            drop.classList.remove("active");
                        }
                    });
                    e.stopPropagation();
                    btn.setAttribute("aria-expanded", btn.getAttribute("aria-expanded") === "false" ? "true" : "false");
                });
            });

            // close dropdown menu when the dropdown links are clicked
            links.forEach((link) =>
                link.addEventListener("click", () => {
                    closeDropdownMenu();
                    setAriaExpandedFalse();
                    toggleHamburger();
                }),
            );

            // close dropdown menu when you click on the document body
            document.documentElement.addEventListener("click", () => {
                closeDropdownMenu();
                setAriaExpandedFalse();
            });

            // close dropdown when the escape key is pressed
            document.addEventListener("keydown", (e) => {
                if (e.key === "Escape") {
                    closeDropdownMenu();
                    setAriaExpandedFalse();
                }
            });

            // toggle hamburger menu
            hamburgerBtn.addEventListener("click", toggleHamburger);
        }
    }
    customElements.define("site-nav", Navigation);
</script>

<script>
    const initNav = () => {
        const navButton = document.querySelector<HTMLDivElement>("#nav-toggle"),
            navigation = document.querySelector<HTMLElement>("#siteNav"),
            submenuItems = document.querySelectorAll("[data-submenu]");

        if (navButton === null) {
            return;
        }

        const collapseDropdowns = (e: MouseEvent | KeyboardEvent | null = null) => {
            const openedDropdowns = document.querySelectorAll("[data-submenu].opened");

            if (e === null) {
                openedDropdowns.forEach((d) => {
                    d.classList.remove("opened");
                });
                return;
            }

            const target = e.target;
            openedDropdowns.forEach((d) => {
                const button = d.children[0];
                if (button === target) {
                    return;
                }
                d.classList.remove("opened");
            });
        };

        const handleSubmenus = () => {
            submenuItems.forEach((sub) => {
                const submenuButton = sub.querySelector<HTMLButtonElement>("[data-submenu-button]")!;

                submenuButton?.addEventListener("click", (e) => {
                    const submenuId = submenuButton.dataset.submenuButton!;
                    console.log(submenuId);
                    const menu = document.getElementById(submenuId);
                    menu?.classList.toggle("opened");

                    const button = sub.children[0];
                    if (button.ariaExpanded === "false") {
                        button.ariaExpanded = "true";
                    } else {
                        button.ariaExpanded = "false";
                    }
                });
            });
        };

        /**
         * Opens/closes navigation menu.
         */
        const openCloseNav = () => {
            document.body.classList.toggle("nav-active");
        };

        /**
         * Closes navigation menu
         */
        const closeNav = () => {
            if (document.body.classList.contains("nav-active")) {
                document.body.classList.remove("nav-active");
            }
        };

        // Collapse responsive navbar on click outside or on its child items
        const collapseNav = (e: MouseEvent | KeyboardEvent | null = null) => {
            if (e === null) {
                closeNav();
                return;
            }

            let target = e.target as HTMLElement;

            if (target === navButton) {
                return;
            }

            if (navigation?.contains(target)) {
                return;
            }

            closeNav();
        };

        document.onmouseup = (e) => {
            //collapseNav(e);
            collapseDropdowns(e);
        };

        document.onkeydown = (e) => {
            if (e.key === "Enter") {
                //collapseNav(e);
                //collapseDropdowns(e);
            }

            if (e.key === "Escape") {
                //collapseNav();
                //collapseDropdowns();
            }
        };

        // Run everything
        navButton.addEventListener("click", (e) => {
            e.preventDefault();
            openCloseNav();
        });

        handleSubmenus();

        console.log("Navigation initialized.");
    };

    document.addEventListener(
        "astro:page-load",
        (e) => {
            initNav();
        },
        { once: false },
    );
</script>
