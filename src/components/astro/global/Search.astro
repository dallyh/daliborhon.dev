---
// https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro
// Really thanks folks!

import * as m from "$messages";
import "@pagefind/default-ui/css/ui.css";
import { Icon } from "astro-icon/components";

const locale = Astro.currentLocale!;

// Temporary, until https://github.com/CloudCannon/pagefind/pull/543 gets merged
// It is merged, waiting for release!
let translations = {};
if (locale === "cs") {
    translations = {
        placeholder: "Hledat",
        clear_search: "Smazat",
        load_more: "Načíst další výsledky",
        search_label: "Prohledat tuto stránku",
        filters_label: "Filtry",
        zero_results: "Žádné výsledky pro [SEARCH_TERM]",
        many_results: "[COUNT] výsledků pro [SEARCH_TERM]",
        one_result: "[COUNT] výsledek pro [SEARCH_TERM]",
        alt_search: "Žádné výsledky pro [SEARCH_TERM]. Zobrazují se výsledky pro [DIFFERENT_TERM]",
        search_suggestion: "Žádné výsledky pro [SEARCH_TERM]. Související výsledky hledání:",
        searching: "Hledám [SEARCH_TERM]...",
    };
}
---

<site-search data-translations={JSON.stringify(translations)}>
    <button data-open-modal disabled>
        <div class="inner">
            <i class="search-icon"><Icon name="bi:search" size={18} title={m.common__search()} /></i>
            <i class="slash-icon"><Icon name="forward-slash" size={18} title={m.common__search_label()} /></i>
        </div>
    </button>

    <dialog aria-label={m.common__search()}>
        <div class="dialog-frame">
            <button data-close-modal>{m.common__close_btn()}</button>
            <div class="search-container">
                <div id="pagefind"></div>
            </div>
        </div>
    </dialog>
</site-search>

<script>
    class SiteSearch extends HTMLElement {
        constructor() {
            super();
            const openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
            const closeBtn = this.querySelector<HTMLButtonElement>("button[data-close-modal]")!;
            const dialog = this.querySelector("dialog")!;
            const dialogFrame = this.querySelector(".dialog-frame")!;
            const trailingSlash = import.meta.env.DEV ? "/" : "";

            let pageFindInstance: any = null;

            /** Close the modal if a user clicks on a link or outside of the modal. */
            const onClick = (event: MouseEvent) => {
                const isLink = "href" in (event.target || {});
                if (isLink || (document.body.contains(event.target as Node) && !dialogFrame.contains(event.target as Node))) {
                    closeModal();
                }
            };

            const openModal = (event?: MouseEvent) => {
                dialog.showModal();
                document.body.toggleAttribute("data-search-modal-open", true);
                this.querySelector("input")?.focus();
                event?.stopPropagation();
                window.addEventListener("click", onClick);
            };

            const closeModal = () => dialog.close();

            openBtn.addEventListener("click", openModal);
            openBtn.disabled = false;
            closeBtn.addEventListener("click", closeModal);

            dialog.addEventListener("close", () => {
                document.body.toggleAttribute("data-search-modal-open", false);
                window.removeEventListener("click", onClick);
            });

            // Listen for `/` and `cmd + k` keyboard shortcuts.
            window.addEventListener("keydown", (e) => {
                const isInput =
                    document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
                if (e.metaKey === true && e.key === "k") {
                    dialog.open ? closeModal() : openModal();
                    e.preventDefault();
                } else if (e.key === "/" && !dialog.open && !isInput) {
                    openModal();
                    e.preventDefault();
                }
            });

            let translations = {};
            try {
                translations = JSON.parse(this.dataset.translations || "{}");
            } catch {}

            const initPagefind = () => {
                const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
                onIdle(async () => {
                    const { PagefindUI } = await import("@pagefind/default-ui");

                    if (pageFindInstance === null) {
                        pageFindInstance = new PagefindUI({
                            element: "#pagefind",
                            baseUrl: import.meta.env.BASE_URL,
                            bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
                            showImages: false,
                            translations,
                            showSubResults: true,
                            sort: {
                                date: "asc",
                            },
                            processResult: function (result: any) {
                                if (result?.meta?.image) {
                                    let resultBase = new URL(result.url, String(window.location));
                                    let remappedImage = new URL(result.meta.image, resultBase);

                                    if (remappedImage.hostname !== window.location.hostname) {
                                        result.meta.image = remappedImage.toString();
                                    } else {
                                        result.meta.image = remappedImage.pathname + trailingSlash;
                                    }
                                }
                            },
                        });
                    }
                });
            };

            document.addEventListener("astro:after-swap", () => {
                if (pageFindInstance !== null) {
                    pageFindInstance.destroy();
                }
            });

            document.addEventListener(
                "astro:page-load",
                () => {
                    initPagefind();
                },
                { once: false },
            );
        }
    }
    customElements.define("site-search", SiteSearch);
</script>

<style>
    site-search {
        display: contents;
    }

    button[data-open-modal] {
        cursor: pointer;

        .inner {
            display: flex;
            align-items: center;
            justify-content: space-between;
            border: var(--border-search);
            border-radius: 6px;
            padding-inline: 0.75rem 1rem;
            min-width: 11rem;
            min-height: 2.2rem;
            gap: 0.5rem;

            @media (max-width: 820px) {
                border: 0;
                min-width: 0;
                min-height: 0;
                padding: 0.5rem;

                .slash-icon {
                    display: none;
                }
            }
        }

        &:hover,
        &:focus-visible {
            .inner {
                border: 1px solid rgba(var(--accent), 1);

                @media (max-width: 768px) {
                    border: none;
                    color: rgba(var(--accent), 1);
                }
            }
        }
    }

    dialog {
        padding: 0;
        background-color: var(--card-bg);
        border: var(--border-search);
        margin: 4rem auto auto;
        border-radius: 0.5rem;
        width: 90%;
        max-width: 60rem;
        height: max-content;
        min-height: 15rem;
        max-height: calc(100% - 8rem);
        box-shadow: var(--global-box-shadow);

        @media (max-width: 768px) {
            box-sizing: border-box;
            border-radius: unset;
            margin: 0;
            width: 100%;
            max-width: 100%;
            height: 100%;
            max-height: 100%;
        }
    }

    dialog[open] {
        display: grid;
    }

    dialog::backdrop {
        background-color: hsla(223, 13%, 10%, 0.66);
        -webkit-backdrop-filter: blur(0.25rem);
        backdrop-filter: blur(0.25rem);
    }

    .dialog-frame {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1.5rem;

        @media (max-width: 768px) {
            padding: 1rem;
        }
    }

    button[data-close-modal] {
        display: none;
        box-sizing: border-box;
        height: auto;
        width: auto;

        @media (max-width: 768px) {
            display: flex;
            display: block;
            position: absolute;
            align-items: center;
            align-self: flex-end;
            height: calc(64px * var(--pagefind-ui-scale));
            padding: 0.25rem;
            border: 0;
            background: transparent;
            cursor: pointer;
            color: rgba(var(--accent), 1);
            z-index: 1;
        }
    }
</style>

<style is:global>
    :root {
        --pagefind-ui-scale: 0.8;
        --pagefind-ui-primary: rgba(var(--accent), 1);
        --pagefind-ui-text: var(--body-color);
        --pagefind-ui-background: var(--bg-color);
        --pagefind-ui-border: rgba(var(--accent), 1);
        --pagefind-ui-tag: rgba(var(--accent), 1);
        --pagefind-ui-border-width: 0px;
        --pagefind-ui-border-radius: 6px;
        --pagefind-ui-image-border-radius: 6px;
        --pagefind-ui-image-box-ratio: 3 / 2;
        --pagefind-ui-font: unset;
    }

    [data-search-modal-open] {
        overflow: hidden;
    }

    #pagefind .pagefind-ui__search-input {
        box-shadow: var(--global-box-shadow);

        @media (max-width: 768px) {
            width: calc(100% - 5rem);
        }

        &:focus-visible {
            box-shadow: var(--focus-visible-shadow);
        }
    }

    #pagefind .pagefind-ui__drawer {
        gap: calc(30px * var(--pagefind-ui-scale));
    }

    #pagefind .pagefind-ui__search-clear {
        width: calc(60px * var(--pagefind-ui-scale));
        padding: 0;
        background-color: transparent;
        overflow: hidden;
        display: block;

        @media (max-width: 768px) {
            inset-inline-end: 5rem;
        }
    }

    #pagefind .pagefind-ui__search-clear::before {
        content: "";
        -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
            center / 50% no-repeat;
        mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
            center / 50% no-repeat;
        background-color: rgba(var(--accent), 1);
        display: block;
        width: 100%;
        height: 100%;
    }

    #pagefind .pagefind-ui__result-link {
        color: var(--a-color);

        &:visited {
            color: var(--a-visited);
        }
    }

    #pagefind .pagefind-ui__result {
        padding: calc(10px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale)) calc(20px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale));
        border-radius: 6px;
        background-color: var(--pagefind-ui-background);
    }

    #pagefind .pagefind-ui__results > * + * {
        margin-top: 0.8rem;
    }

    #pagefind .pagefind-ui__result-excerpt {
        margin-top: 0.8rem;
    }

    #pagefind mark {
        background-color: transparent;
        font-weight: 700;
        color: inherit;
        text-decoration: underline;
    }

    #pagefind .pagefind-ui__result-tags {
        display: flex;
        gap: 0.5rem;

        .pagefind-ui__result-tag {
            display: inline-flex;
            background-color: rgba(var(--accent), 0.6);
            padding: 0.35rem;
        }
    }
</style>
