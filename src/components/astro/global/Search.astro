---
// https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro
// Really thanks folks!

interface Props {
	inDrawer?: boolean;
}

const { inDrawer = false } = Astro.props;

import * as m from "$messages";
import "@pagefind/default-ui/css/ui.css";
---

<site-search>
	<button data-open-modal disabled class={`${inDrawer ? "w-full" : ""}`}>
		<label class={`input input-bordered ${inDrawer ? "" : "input-sm"} flex items-center gap-2`}>
			<input type="text" class={`grow ${inDrawer ? "" : "max-w-28"}`} placeholder={m.common__search()} />
			{!inDrawer && 
				<kbd class="kbd kbd-xs hidden lg:block">ctrl</kbd>
				<kbd class="kbd kbd-xs hidden lg:block">K</kbd>
			}	
		</label>
	</button>

	<dialog aria-label={m.common__search()}>
		<div class="box">
			<div id="pagefind"></div>
			<button data-close-modal class="delete is-large has-background-primary"><span class="sr-only">{m.common__close_btn()}</span></button>
		</div>
		<button class="delete is-large has-background-primary" data-close-modal aria-label={m.common__close_btn()}></button>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {

		#pageFindInstance: any = null;

		disconnectedCallback() {
			if (this.#pageFindInstance) {
				this.#pageFindInstance.destroy()
			}
		}

		connectedCallback() {
			const openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
			const closeBtns = this.querySelectorAll<HTMLButtonElement>("button[data-close-modal]")!;
			const dialog = this.querySelector("dialog")!;
			const dialogFrame = this.querySelector(".modal-content")!;
			const trailingSlash = import.meta.env.DEV ? "/" : "";
	

			/** Close the modal if a user clicks on a link or outside of the modal. */
			const onClick = (event: MouseEvent) => {
				const isLink = "href" in (event.target || {});
				if (isLink || (document.body.contains(event.target as Node) && !dialogFrame.contains(event.target as Node))) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.documentElement.toggleAttribute("data-search-modal-open", true);
				this.querySelector("input")?.focus();
				event?.stopPropagation();
				window.addEventListener("click", onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener("click", openModal);
			openBtn.disabled = false;
			closeBtns.forEach((btn) => {
				btn.addEventListener("click", closeModal);
			});

			dialog.addEventListener("close", () => {
				document.documentElement.toggleAttribute("data-search-modal-open", false);
				window.removeEventListener("click", onClick);
			});

			// Listen for `/` and `cmd + k` keyboard shortcuts.
			window.addEventListener("keydown", (e) => {
				const isInput =
					document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				} else if (e.key === "/" && !dialog.open && !isInput) {
					openModal();
					e.preventDefault();
				}
			});

			const initPagefind = () => {
				const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
				onIdle(async () => {
					// @ts-ignore - could not find types for this import
					const { PagefindUI } = await import("@pagefind/default-ui");

					if (this.#pageFindInstance !== null) {
						console.log("Pagefind instance is already initialized.");
						return;
					}

					this.#pageFindInstance = new PagefindUI({
						element: "#pagefind",
						baseUrl: import.meta.env.BASE_URL,
						bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
						showImages: false,
						showSubResults: false,
						processResult: function (result: any) {
							if (result?.meta?.image) {
								let resultBase = new URL(result.url, String(window.location));
								let remappedImage = new URL(result.meta.image, resultBase);

								if (remappedImage.hostname !== window.location.hostname) {
									result.meta.image = remappedImage.toString();
								} else {
									result.meta.image = remappedImage.pathname + trailingSlash;
								}
							}
						},
					});
				});
			};

			initPagefind();
		}
	}
	customElements.define("site-search", SiteSearch);
</script>

<style>
	site-search {
		display: contents;
	}

	dialog {
		padding: 1rem;
		margin: 2rem auto auto;
		border: none;
		width: 100%;
		max-width: 60rem;
		height: max-content;
		max-height: calc(100% - 4rem);
		background-color: unset;
		overflow: auto;

		@media screen and (min-width: 608px) {
			overflow: hidden;
		}

		@media screen and (max-width: 768px) {
			padding: 0;
			margin: 0;
			width: 100vw;
			max-width: unset;
			height: 100%;
			max-height: max-content;
			min-height: 100vh;
		}
	}

	dialog::backdrop {
		background-color: hsla(223, 13%, 10%, 0.66);
		-webkit-backdrop-filter: blur(0.25rem);
		backdrop-filter: blur(0.25rem);
	}

	.slash-icon {
		margin-top: 4px; /* center it */
	}

	.box {
		margin: 0;
		min-width: 100%;
		min-height: 100%;

		@media screen and (max-width: 768px) {
			border-radius: unset;
		}
	}

	.delete {
		--bulma-delete-color: black;
		position: absolute;
		right: 2rem;
		top: 2.8rem;

		@media screen and (max-width: 768px) {
			top: 1.8rem;
			right: 1rem;
		}
	}

	.field {
		.input {
			@media screen and (max-width: 425px) {
				max-width: 120px;
			}
		}
	}
</style>

<style is:global>
	:root {
		--pagefind-ui-scale: 0.8;
		--pagefind-ui-primary: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-text: var(--bulma-text);
		--pagefind-ui-background: transparent;
		--pagefind-ui-border: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-tag: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-border-width: 1px;
		--pagefind-ui-border-radius: var(--bulma-radius-large);
		--pagefind-ui-image-border-radius: var(--bulma-radius-large);
		--pagefind-ui-image-box-ratio: 3 / 2;
		--pagefind-ui-font: unset;
	}

	[data-search-modal-open] {
		overflow: hidden;
	}

	#pagefind .pagefind-ui__search-input {
		width: calc(100% - 3rem);

		&:focus-within,
		&:focus-visible,
		&:focus {
			outline: none;
			border-color: hsl(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l)) !important;
			box-shadow: var(--bulma-focus-shadow-size) hsla(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l), var(--bulma-focus-shadow-alpha)) !important;
		}
	}

	#pagefind .pagefind-ui__drawer {
		gap: calc(30px * var(--pagefind-ui-scale));
	}

	#pagefind .pagefind-ui__results-area {
		max-height: max-content;

		@media screen and (min-width: 608px) {
			&:has(button) {
				.pagefind-ui__results {
					height: calc(100vh - 225px - 6rem);
				}
			}

			.pagefind-ui__results {
				overflow-y: scroll;
				max-height: calc(100vh - 225px - 2rem);
			}
		}
	}

	#pagefind .pagefind-ui__search-clear {
		width: calc(60px * var(--pagefind-ui-scale));
		padding: 0;
		background-color: transparent;
		overflow: hidden;
		display: block;
		inset-inline-end: 3rem;
	}

	#pagefind .pagefind-ui__search-clear::before {
		content: "";
		-webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
			center / 50% no-repeat;
		mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
			center / 50% no-repeat;
		background-color: var(--bulma-primary);
		display: block;
		width: 100%;
		height: 100%;
	}

	#pagefind .pagefind-ui__result {
		padding: calc(10px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale)) calc(20px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale));
		background-color: var(--pagefind-ui-background);
	}

	#pagefind .pagefind-ui__result-tag {
		color: black;
	}

	#pagefind .pagefind-ui__results > * + * {
		margin-top: 0.8rem;
	}

	#pagefind .pagefind-ui__result-excerpt {
		margin-top: 0.8rem;
	}

	#pagefind mark {
		background-color: transparent;
		font-weight: 700;
		color: inherit;
		text-decoration: underline;
	}

	#pagefind .pagefind-ui__result-title {
		.pagefind-ui__result-link {
			color: var(--bulma-link);
		}
	}
</style>
