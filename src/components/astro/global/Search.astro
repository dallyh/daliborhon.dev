---
// https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro
// Really thanks folks!

import * as m from "$messages";
import "@pagefind/default-ui/css/ui.css";
import { Icon } from "astro-icon/components";
---

<site-search>
	<button data-open-modal disabled>
		<div class="field">
			<p class="control has-icons-left has-icons-right">
				<input class="input is-small" type="email" placeholder={m.common__search()} />
				<span class="icon is-small is-left">
					<i class="fa-solid fa-magnifying-glass"></i>
				</span>
				<span class="icon is-small is-right">
					<i class="slash-icon"><Icon name="forward-slash" size={18} title={m.common__search_label()} /></i>
				</span>
			</p>
		</div>
	</button>

	<dialog aria-label={m.common__search()}>
		<div class="modal is-active">
			<div class="modal-background"></div>
			<div class="modal-content">
				<div class="box">
					<div>
						<div id="pagefind"></div>
						<button data-close-modal class="delete is-large has-background-primary"><span class="sr-only">Close</span></button>
					</div>
				</div>
			</div>
			<button class="modal-close is-large" data-close-modal aria-label={m.common__close_btn()}></button>
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
			const closeBtns = this.querySelectorAll<HTMLButtonElement>("button[data-close-modal]")!;
			const dialog = this.querySelector("dialog")!;
			const dialogFrame = this.querySelector(".modal-content")!;
			const trailingSlash = import.meta.env.DEV ? "/" : "";

			let pageFindInstance: any = null;

			/** Close the modal if a user clicks on a link or outside of the modal. */
			const onClick = (event: MouseEvent) => {
				const isLink = "href" in (event.target || {});
				if (isLink || (document.body.contains(event.target as Node) && !dialogFrame.contains(event.target as Node))) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.body.toggleAttribute("data-search-modal-open", true);
				this.querySelector("input")?.focus();
				event?.stopPropagation();
				window.addEventListener("click", onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener("click", openModal);
			openBtn.disabled = false;
			closeBtns.forEach((btn) => {
				btn.addEventListener("click", closeModal);
			});

			dialog.addEventListener("close", () => {
				document.body.toggleAttribute("data-search-modal-open", false);
				window.removeEventListener("click", onClick);
			});

			// Listen for `/` and `cmd + k` keyboard shortcuts.
			window.addEventListener("keydown", (e) => {
				const isInput =
					document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				} else if (e.key === "/" && !dialog.open && !isInput) {
					openModal();
					e.preventDefault();
				}
			});

			const initPagefind = () => {
				const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
				onIdle(async () => {
					const { PagefindUI } = await import("@pagefind/default-ui");

					if (pageFindInstance === null) {
						pageFindInstance = new PagefindUI({
							element: "#pagefind",
							baseUrl: import.meta.env.BASE_URL,
							bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
							showImages: false,
							showSubResults: false,
							processResult: function (result: any) {
								if (result?.meta?.image) {
									let resultBase = new URL(result.url, String(window.location));
									let remappedImage = new URL(result.meta.image, resultBase);

									if (remappedImage.hostname !== window.location.hostname) {
										result.meta.image = remappedImage.toString();
									} else {
										result.meta.image = remappedImage.pathname + trailingSlash;
									}
								}
							},
						});
					}
				});
			};

			document.addEventListener("astro:after-swap", () => {
				if (pageFindInstance !== null) {
					pageFindInstance.destroy();
				}
			});

			document.addEventListener(
				"astro:page-load",
				() => {
					initPagefind();
				},
				{ once: false }
			);
		}
	}
	customElements.define("site-search", SiteSearch);
</script>

<style>
	site-search {
		display: contents;
	}

	dialog::backdrop {
		background-color: transparent;
	}

	.slash-icon {
		margin-top: 4px; /* center it */
	}

	.box {
		button {
			display: none;
		}
	}

	.modal-content {
		position: fixed;
		top: 5rem;
	}

	@media screen and (max-width: 768px) {
		.modal-content {
			top: 0rem;
			height: 100vh;
			max-height: unset;
		}

		.modal-close {
			display: none;
		}

		.box {
			width: 100%;
			gap: 1rem;
			height: 100%;

			button {
				position: absolute;
				right: 1rem;
				top: 1.8rem;
				--bulma-delete-color: var(--bulma-primary-00);
				display: initial;
			}

			#pagefind {
				width: 100%;
			}
		}

		.field {
			.input {
				max-width: 120px;
			}
		}
	}
</style>

<style is:global>
	:root {
		--pagefind-ui-scale: 0.8;
		--pagefind-ui-primary: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-text: var(--bulma-text);
		--pagefind-ui-background: transparent;
		--pagefind-ui-border: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-tag: rgba(var(--bulma-primary-rgb), 1);
		--pagefind-ui-border-width: 1px;
		--pagefind-ui-border-radius: var(--bulma-radius-large);
		--pagefind-ui-image-border-radius: var(--bulma-radius-large);
		--pagefind-ui-image-box-ratio: 3 / 2;
		--pagefind-ui-font: unset;
	}

	[data-search-modal-open] {
		overflow: hidden;
	}

	#pagefind .pagefind-ui__search-input {
		&:focus-within,
		&:focus-visible,
		&:focus {
			outline: none;
			border-color: hsl(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l)) !important;
			box-shadow: var(--bulma-focus-shadow-size) hsla(var(--bulma-focus-h), var(--bulma-focus-s), var(--bulma-focus-l), var(--bulma-focus-shadow-alpha)) !important;
		}

		@media (max-width: 768px) {
			width: calc(100% - 3rem);
		}
	}

	#pagefind .pagefind-ui__drawer {
		gap: calc(30px * var(--pagefind-ui-scale));
	}

	#pagefind .pagefind-ui__search-clear {
		width: calc(60px * var(--pagefind-ui-scale));
		padding: 0;
		background-color: transparent;
		overflow: hidden;
		display: block;

		@media (max-width: 768px) {
			inset-inline-end: 3rem;
		}
	}

	#pagefind .pagefind-ui__search-clear::before {
		content: "";
		-webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
			center / 50% no-repeat;
		mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
			center / 50% no-repeat;
		background-color: var(--bulma-primary);
		display: block;
		width: 100%;
		height: 100%;
	}

	#pagefind .pagefind-ui__result {
		padding: calc(10px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale)) calc(20px * var(--pagefind-ui-scale)) calc(10px * var(--pagefind-ui-scale));
		background-color: var(--pagefind-ui-background);
	}

	#pagefind .pagefind-ui__results > * + * {
		margin-top: 0.8rem;
	}

	#pagefind .pagefind-ui__result-excerpt {
		margin-top: 0.8rem;
	}

	#pagefind mark {
		background-color: transparent;
		font-weight: 700;
		color: inherit;
		text-decoration: underline;
	}

	#pagefind .pagefind-ui__result-title {
		.pagefind-ui__result-link {
			color: var(--bulma-link);
		}
	}
</style>
