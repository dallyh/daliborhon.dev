---
import * as m from "$messages";
import "@pagefind/default-ui/css/ui.css";
---

<site-search>
	<dialog class="modal" aria-label={m.common__search()}>
		<div class="modal-box w-11/12 max-w-5xl">
			<form method="dialog">
				<button data-close-modal aria-label={m.common__close_btn()} class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">
					<span class="sr-only">{m.common__close_btn()}</span>âœ•
				</button>
			</form>
			<div id="pagefind" class="p-6"></div>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		#pageFindInstance: any = null;

		connectedCallback() {
			const dialog = this.querySelector("dialog")!;
			const closeBtn = this.querySelector("[data-close-modal]")!;
			const trailingSlash = import.meta.env.DEV ? "/" : "";

			const openModal = (event?: Event) => {
				console.log("Received");
				dialog.showModal();
				document.documentElement.toggleAttribute("data-search-modal-open", true);
				this.querySelector("input")?.focus();
				event?.stopPropagation();
			};

			// Handle close
			const closeModal = () => {
				dialog.close();
			};
			closeBtn.addEventListener("click", closeModal);

			// If you want to close on outside click, etc.:
			dialog.addEventListener("close", () => {
				document.documentElement.removeAttribute("data-search-modal-open");
			});

			// Listen for a custom event to open the modal:
			window.addEventListener("openSearchModal", (e) => openModal(e));

			window.addEventListener("keydown", (e) => {
				const isInput =
					document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				} else if (e.key === "/" && !dialog.open && !isInput) {
					openModal();
					e.preventDefault();
				}
			});

			// Lazy-init Pagefind
			const initPagefind = () => {
				const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
				onIdle(async () => {
					// @ts-ignore - could not find types for this import
					const { PagefindUI } = await import("@pagefind/default-ui");

					if (this.#pageFindInstance !== null) {
						console.log("Pagefind instance is already initialized.");
						return;
					}

					this.#pageFindInstance = new PagefindUI({
						element: "#pagefind",
						baseUrl: import.meta.env.BASE_URL,
						bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
						showImages: false,
						showSubResults: false,
						processResult: function (result: any) {
							if (result?.meta?.image) {
								let resultBase = new URL(result.url, String(window.location));
								let remappedImage = new URL(result.meta.image, resultBase);

								if (remappedImage.hostname !== window.location.hostname) {
									result.meta.image = remappedImage.toString();
								} else {
									result.meta.image = remappedImage.pathname + trailingSlash;
								}
							}
						},
					});
				});
			};

			initPagefind();
		}

		disconnectedCallback() {
			if (this.#pageFindInstance) {
				this.#pageFindInstance.destroy();
			}
		}
	}

	customElements.define("site-search", SiteSearch);
</script>

<style is:global>
	[data-theme="light"] {
		--pagefind-ui-scale: 1;
		/* Use DaisyUI's "primary" for Pagefind primary color */
		--pagefind-ui-primary: oklch(var(--p));
		/* Use DaisyUI base-content for text color */
		--pagefind-ui-text: oklch(var(--bc));
		/* Use DaisyUI base-100 for background */
		--pagefind-ui-background: oklch(var(--b1));
		/* Use DaisyUI base-200 or base-300 for borders */
		--pagefind-ui-border: oklch(var(--b2));
		--pagefind-ui-tag: oklch(var(--b2));
		--pagefind-ui-border-width: 2px;
		--pagefind-ui-border-radius: 8px;
		--pagefind-ui-image-border-radius: 8px;
		--pagefind-ui-image-box-ratio: 3 / 2;
		--pagefind-ui-font: sans-serif;
	}

	[data-theme="dark"] {
		--pagefind-ui-scale: 1;
		--pagefind-ui-primary: oklch(var(--p));
		--pagefind-ui-text: oklch(var(--bc));
		--pagefind-ui-background: oklch(var(--b1));
		--pagefind-ui-border: oklch(var(--b2));
		--pagefind-ui-tag: oklch(var(--b2));
		--pagefind-ui-border-width: 2px;
		--pagefind-ui-border-radius: 8px;
		--pagefind-ui-image-border-radius: 8px;
		--pagefind-ui-image-box-ratio: 3 / 2;
		--pagefind-ui-font: sans-serif;
	}
</style>
