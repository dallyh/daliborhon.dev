---
import ISO6991 from "iso-639-1";
import { locales } from "@i18n/config";
import { loadNamespaces, t } from "@i18n/i18n";
import { getLocale } from "@i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";

export interface Props {
    showFlag?: boolean;
    showTitle?: boolean;
}

const locale = getLocale(Astro.url);
const { pathname } = Astro.url;
const { showFlag = false, showTitle = true } = Astro.props;
const capitalizeFirstLetter = (str: string) => {
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);
    return capitalized;
};

// i18next
const namespaces = ["footer"];
await loadNamespaces(locale, namespaces);
---

<div class="language-selector">
    {showTitle && <p>{t("footer:Language")}: </p>}
    {
        locales.map((supportedLanguage: string) => {
            let value = getRelativeLocaleUrl(supportedLanguage, pathname);
            const nativeName = capitalizeFirstLetter(ISO6991.getNativeName(supportedLanguage));
            let renderSeparator = true;

            if (supportedLanguage === locales[locales.length - 1]) {
                renderSeparator = false;
            }

            return (
                <>
                    <a href={value} class="lang-link" rel="prefetch" data-js-language={supportedLanguage} title={`${t("footer:Language")}: ${nativeName}`}>
                        {showFlag && <span class={`flag ${supportedLanguage}`} />}
                        <span class={supportedLanguage === locale ? "active" : ""}>{nativeName}</span>
                    </a>
                    {renderSeparator && <span> | </span>}
                </>
            );
        })
    }
</div>

<script>
    const setupLinks = () => {
        const languageSelector = document.querySelectorAll<HTMLAnchorElement>(".language-selector [data-js-language]");
        languageSelector.forEach((selector) => {
            selector.addEventListener("click", function (e) {
                let currectSelector = selector;
                let selectedLanguage = currectSelector.getAttribute("data-js-language");
                if (selectedLanguage === null) {
                    console.error("Could not find 'data-js-language' attribute.");
                    return;
                }
                console.log("Language changed: " + selectedLanguage);
                window.localStorage.setItem("language", selectedLanguage);
            });
        });
    };

    document.addEventListener(
        "astro:page-load",
        (e) => {
            e.target?.removeEventListener;
            setupLinks();
        },
        { once: false },
    );
</script>

<style>
    .flag {
        background-size: contain;
        background-position: 50%;
        background-repeat: no-repeat;
        display: inline-block;
        width: 15px;
        height: 10px;
        margin-right: 0.25rem;

        &.cs {
            background-image: url(/assets/img/flags/cz.svg);
        }

        &.en {
            background-image: url(/assets/img/flags/us.svg);
        }
    }

    .language-selector {
        display: flex;
        gap: 0.25rem;
        justify-content: center;
        align-items: center;
        font-size: inherit;
    }

    .language-selector {
        display: flex;
        flex-direction: row;
    }

    span.active {
        font-weight: bold;
    }

    a {
        color: rgba(var(--accent), 1);

        &:visited {
            color: rgba(var(--accent), 1);
        }
    }
</style>
