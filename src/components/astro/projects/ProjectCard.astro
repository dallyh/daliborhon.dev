---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries, render } from "astro:content";
import { githubRestClient } from "@services/github/githubRestClient";
import { formatDateTime } from "@utils";
import Icon from "node_modules/astro-icon/components/Icon.astro";
import { extractFileNameAndExtension } from "src/utils/extractFilenameAndExtension";
import GithubDate from "./GithubDate.astro";
import GithubLanguages from "./GithubLanguages.astro";

interface Props {
	project: CollectionEntry<"projects">;
}

const locale = Astro.currentLocale!;
const { project } = Astro.props;
const { title, image, sourceUrl, tags, startDate } = project.data;
const relatedTags = await getEntries(tags);
const { Content } = await render(project);

const projectUrl = new URL(sourceUrl);
let repository = undefined;
if (projectUrl.host === "github.com") {
	// Example: https://github.com/dallyh/static-cms-gh-oauth-provider
	repository = await githubRestClient.repos.get({ owner: projectUrl.pathname.split("/")[1], repo: projectUrl.pathname.split("/")[2] });
}

const file = extractFileNameAndExtension(image);
function getSVG(name: string) {
	const filepath = `/public/assets/uploads/projects/${name}.svg`;
	const files = import.meta.glob<string>("/public/assets/uploads/projects/**/*.svg", {
		query: "?raw",
		eager: true,
		import: "default",
	});

	if (!(filepath in files)) {
		throw new Error(`${filepath} not found`);
	}

	return files[filepath];
}

function getImage(name: string, ext: string): ImageMetadata {
	const filepath = `/public/assets/uploads/img/projects/${name}.${ext}`;
	const files = import.meta.glob<ImageMetadata>("/public/assets/uploads/img/projects/**/*.{svg,jpg,jpeg,png,webp,avif}", {
		eager: true,
	});

	if (!(filepath in files)) {
		throw new Error(`${filepath} not found`);
	}

	return files[filepath];
}
---

<div class="card">
	<div class="card-content">
		<div class="media">
			<div class="media-left">
				{
					file.ext !== "svg" && (
						<div class="image is-48x48">
							<Image src={getImage(file.name, file.ext)} alt={title} width={48} height={48} title={title} loading="lazy" format="webp" />
						</div>
					)
				}
				{
					file.ext === "svg" && (
						<div class="svg-img-card">
							<Fragment set:html={getSVG(file.name)} />
						</div>
					)
				}
			</div>
			<div class="media-content">
				<a class="title is-4" href={sourceUrl} target="_blank" title={title} aria-label={title}>{title}<Icon name="bi:box-arrow-up-right" /></a>
				<p class="subtitle is-6 mt-2">
					<span>ðŸš€</span>
					{repository && <GithubDate date={new Date(repository.data.created_at)} />}
					{!repository && <time datetime={formatDateTime(startDate, locale).iso}>{formatDateTime(startDate, locale).date}</time>}
				</p>
				<div class="tags are-small">
					{
						relatedTags.map((tag) => {
							const { bgColor, title } = tag.data;
							return (
								<span class="tag has-text-black" style={`background: ${bgColor};`}>
									{title}
								</span>
							);
						})
					}
				</div>
			</div>
		</div>
		<div class="content">
			<div class="md-content">
				<Content />
			</div>
		</div>
		{repository && <GithubLanguages repository={repository.data} />}
	</div>
</div>

<style>
	.card {
		height: 100%;
	}
</style>

<style is:global>
	.svg-img-card {
		> svg {
			width: 48px;
			height: 48px;
		}
	}

	.title {
		> svg {
			margin: 0 0 0 10px;
			height: 20px;
			width: 20px;
			bottom: 0px;
		}
	}
</style>
