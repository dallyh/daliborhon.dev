---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries, render } from "astro:content";
import { githubRestClient } from "@services/github/githubRestClient";
import { formatDateTime } from "@utils";
import Icon from "node_modules/astro-icon/components/Icon.astro";
import { extractFileNameAndExtension } from "src/utils/extractFilenameAndExtension";
import GithubDate from "./GithubDate.astro";
import GithubLanguages from "./GithubLanguages.astro";
import ExternalLink from "../global/ExternalLink.astro";

interface Props {
	project: CollectionEntry<"projects">;
}

const locale = Astro.currentLocale!;
const { project } = Astro.props;
const { title, image, sourceUrl, tags, startDate } = project.data;
const relatedTags = await getEntries(tags);
const { Content } = await render(project);

const projectUrl = new URL(sourceUrl);
let repository = undefined;
if (projectUrl.host === "github.com") {
	// Example: https://github.com/dallyh/static-cms-gh-oauth-provider
	repository = await githubRestClient.repos.get({ owner: projectUrl.pathname.split("/")[1], repo: projectUrl.pathname.split("/")[2] });
}

const file = extractFileNameAndExtension(image);
function getSVG(name: string) {
	const filepath = `/public/assets/uploads/projects/${name}.svg`;
	const files = import.meta.glob<string>("/public/assets/uploads/projects/**/*.svg", {
		query: "?raw",
		eager: true,
		import: "default",
	});

	if (!(filepath in files)) {
		throw new Error(`${filepath} not found`);
	}

	return files[filepath];
}

function getImage(name: string, ext: string): ImageMetadata {
	const filepath = `/public/assets/uploads/img/projects/${name}.${ext}`;
	const files = import.meta.glob<ImageMetadata>("/public/assets/uploads/img/projects/**/*.{svg,jpg,jpeg,png,webp,avif}", {
		eager: true,
	});

	if (!(filepath in files)) {
		throw new Error(`${filepath} not found`);
	}

	return files[filepath];
}
---

<div class="card bg-base-200 max-w-full shadow-xl h-full">
	<div class="card-body">
		<div class="flex mb-2">
			<figure class="svg-img-card mr-2 p-1 flex-shrink-0 flex justify-center items-center">
				{file.ext !== "svg" && <Image src={getImage(file.name, file.ext)} alt={title} width={48} height={48} title={title} loading="lazy" format="webp" />}
				{file.ext === "svg" && <Fragment set:html={getSVG(file.name)} />}
			</figure>
			<div>
				<ExternalLink title={title} href={sourceUrl} class="card-title" target="_blank" aria-label={title}>{title}</ExternalLink>
				<p class="text-sm">
					<span>ðŸš€</span>
					{repository && <GithubDate date={new Date(repository.data.created_at)} />}
					{!repository && <time datetime={formatDateTime(startDate, locale).iso}>{formatDateTime(startDate, locale).date}</time>}
				</p>
			</div>
		</div>

		<div class="flex flex-wrap gap-2">
			{
				relatedTags.map((tag) => {
					const { bgColor, title } = tag.data;
					return (
						<span class="badge text-black" style={`background: ${bgColor};`}>
							{title}
						</span>
					);
				})
			}
		</div>
		<p><Content /></p>
		{repository && <GithubLanguages repository={repository.data} />}
	</div>
</div>

<style is:global>
	.svg-img-card {
		width: 48px;
		height: 48px;

		svg,
		img {
			width: 48px;
			height: 48px;
		}
	}
</style>
