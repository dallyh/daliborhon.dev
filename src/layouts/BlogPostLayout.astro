---
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import MainLayout from "./MainLayout.astro";
import { languageTag } from "$paraglide-runtime";
import TagList from "@components/astro/blog/TagList.astro";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getOgImageUrl } from "@utils";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import Navigation from "@components/astro/global/Navigation.astro";
import * as m from "$messages";
import type { IGenBlogArticleMetaFragment } from "@services/graphql/__generated/sdk";
import { Image } from "@unpic/astro";
import CaisyRichTextRenderer from "@components/astro/blog/CaisyRichTextRenderer/CaisyRichTextRenderer.astro";

interface Props {
    post: IGenBlogArticleMetaFragment;
}

const { post } = Astro.props;

const locale = languageTag();

const layoutProps = {
    title: `${m.blog__post()}: ${post?.title}`,
    author: post?.author?.name!,
    description: post?.description ?? "",
    pubDateTime: post?._meta?.firstPublishedAt!,
    modDatetime: post?._meta?.publishedAt!,
    ogImage: getOgImageUrl(locale, post, Astro.url),
};
---

<MainLayout {...layoutProps}>
    <HeadHrefLangs post={post} slot="hreflangs" />
    <Navigation post={post} slot="header" />
    <main>
        <div class="post-header">
            <BreadCrumbs>
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label={m.common__home()} />
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={m.blog__posts()} />
                <BreadCrumbsItem currentPage={true} label={post?.title!} />
            </BreadCrumbs>
            <div class="post-description">
                <div class="post-meta" data-pagefind-body>
                    <h1 class="gradient-text">{post?.title}</h1>
                    <div class="meta-details">
                        <p>By {post.author?.name}.</p>
                        <FormattedDate pubDateTime={post?._meta?.firstPublishedAt!} modDatetime={post?._meta?.publishedAt!} locale={locale} />
                        {
                            post.category && (
                                <p>
                                    <a href={getRelativeLocaleUrl(locale, `/blog/categories/${post.category?.name}`)}>{post.category?.name}</a>
                                </p>
                            )
                        }
                    </div>
                    <div class="tags">
                        <TagList post={post} bgColor="rgba(var(--bg-color), 1)" justify="flex-start" padding="0" />
                    </div>
                </div>
                <div class="post-image">
                    <Image src={post?.previewImage?.src!} title={post.title} alt={post.title} loading="eager" transition:animate="slide" />
                </div>
            </div>
            <hr />
        </div>
        <article class="prose max-w-none dark:prose-invert">
            <CaisyRichTextRenderer richTextJson={post?.text?.json} connections={post?.text?.connections} />
        </article>
    </main>
    <Footer />
</MainLayout>

<script>
    /**
     * Wraps TOC generated by rehype-toc in details element
     * This needs to be done because of i18n
     */
    const wrapToc = () => {
        const details = document.querySelector<HTMLHeadElement>("#tocDetails");

        if (details === null) {
            return;
        }

        const toc = document.querySelector<HTMLElement>(".toc")!;
        details.appendChild(toc);

        toc.style.display = "block";
    };

    wrapToc();

    document.addEventListener("astro:after-swap", () => {
        wrapToc();
    });
</script>

<style>
    .post-header {
        hr {
            border-color: #374151;
            border-top-width: 1px;
            border-top-style: solid;
            margin-top: 2rem;
            margin-bottom: 2rem;
        }
    }

    .post-description {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        align-items: center;

        @media (max-width: 768px) {
            flex-direction: column;
            gap: 1rem;
        }

        h1 {
            margin-bottom: 0.25rem;
        }

        .post-meta {
            @media (max-width: 768px) {
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
            }
        }

        .meta-details {
            font-size: 0.85rem;
            color: var(--body-color);
            line-height: 1.5rem;
        }

        .post-image {
            overflow: hidden;
            max-width: 200px;
            transition: 0.3s ease;
            transform-origin: top right;

            @media (max-width: 768px) {
                align-self: center;
                max-width: calc(100vw - 20%);
            }

            @media (min-width: 768px) {
                &:hover {
                    transform: scale(2.5);

                    img {
                        border: 1px solid rgba(var(--accent), 1);
                    }
                }
            }

            img {
                border-radius: 6px;
                object-fit: cover;
                object-position: 50% 50%;
                box-shadow: var(--global-box-shadow);
                border: 1px solid transparent;
            }
        }
    }

    .tags {
        margin-top: 0.5rem;
    }
</style>
