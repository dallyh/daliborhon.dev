---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries, render } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import TagList from "@components/astro/blog/TagList.astro";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import Navigation from "@components/astro/global/Navigation.astro";
import SearchMeta from "@components/astro/global/SearchMeta.astro";
import Section from "@components/astro/global/Section.astro";
import type { AllowedLocales } from "@i18n-config";
import { getBlogPostDate, getBlogPostImageUrl, getOgImageUrl } from "@utils/content";
import MainLayout from "./MainLayout.astro";
import { getReadingTime } from "@utils/content";
import MarkdownContent from "@components/astro/global/MarkdownContent.astro";
import ViewCount from "@components/astro/blog/ViewCount.astro";

interface Props {
	post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const { Content, headings } = await render(post);
const locale = Astro.currentLocale as AllowedLocales;
const { pubDate, modDate, title, description } = post.data;
const relatedTags = await getEntries(post.data.tags);
const image = getBlogPostImageUrl(locale, post, Astro.url);
const readingTime = getReadingTime(post.body ?? "");
//const url = Astro.url.pathname;

const layoutProps = {
	title: `${m.blog__post()}: ${title}`,
	author: "Dalibor Hon",
	description: description,
	pubDate: pubDate,
	modDate: typeof modDate === "string" ? undefined : modDate,
	ogImage: getOgImageUrl(locale, post, Astro.url),
};

const tagFilter = relatedTags.map((tag) => {
	return {
		name: m.blog__tags(),
		value: "#" + tag.data.languages[locale],
	};
});

const tags = relatedTags
	?.map((tag) => {
		return "#" + tag.data.languages[locale];
	})
	.join(" ");

const searchProps = {
	title: layoutProps.title,
	description: layoutProps.description,
	date: getBlogPostDate(locale, pubDate, modDate).date,
	filter: [...tagFilter!],
	meta: [
		{
			name: m.blog__tags(),
			value: tags!,
		},
	],
};
---

<MainLayout {...layoutProps}>
	<HeadHrefLangs post={post} slot="hreflangs" />
	<Navigation post={post} slot="header" />
	<SearchMeta {...searchProps} />
	<main class="blog-post">
		<BreadCrumbs>
			<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/")} label={m.common__home()} />
			<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
			<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={m.blog__posts()} />
			<BreadCrumbsItem currentPage={true} label={title} />
		</BreadCrumbs>
		<Section id="blog-post">
			<div class="columns">
				<div class="column">
					<h1 class="title">{title}</h1>
					<div class="subtitles">
						<p class="subtitle is-size-6">
							<span class="icon-text">
								<span class="icon">
									<i class="fa-regular fa-calendar"></i>
								</span>
								<span><FormattedDate {pubDate} {modDate} {locale} /></span>
							</span>
						</p>
						<p class="subtitle is-size-6 mt-2">
							<span class="icon-text">
								<span class="icon">
									<i class="fa-regular fa-clock"></i>
								</span>
								<span>{readingTime} {m.common__minutes()}</span>
							</span>
						</p>
						<p class="subtitle is-size-6 mt-2">
							<span class="icon-text">
								<span class="icon">
									<i class="fa-regular fa-eye"></i>
								</span>
								<ViewCount server:defer url={"url"}>
									<span slot="fallback" class="is-skeleton" style="min-width: 100px">000</span>
								</ViewCount>
							</span>
						</p>

						<div class="tags mt-2">
							<TagList post={post} />
						</div>
					</div>
				</div>
				<div class="column image post-image">
					<Image src={image} width={600} height={315} title={title} alt={title} loading="eager" transition:animate="slide" />
				</div>
			</div>
			<hr />
			<MarkdownContent headings={headings} tocPosition="inside">
				<Content />
			</MarkdownContent>
		</Section>
	</main>
	<Footer />
</MainLayout>

<style is:global>
	.post-image {
		overflow: hidden;
		max-width: 400px;

		@media (max-width: 768px) {
			align-self: center;
			max-width: 100vw;
		}

		img {
			border-radius: var(--bulma-radius-large);
			object-fit: cover;
			object-position: 50% 50%;
			box-shadow: var(--global-box-shadow);
			border: 1px solid transparent;
		}
	}
</style>

<style>
	.title {
		margin-bottom: 0.5rem;
	}

	.subtitles {
		display: flex;
		flex-direction: column;

		.subtitle {
			margin: 0;
		}
	}
</style>
