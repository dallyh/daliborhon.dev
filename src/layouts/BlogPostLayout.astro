---
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import MainLayout from "./MainLayout.astro";
import type { CollectionEntry } from "astro:content";
import { getLocale } from "@i18n/utils";
import TagList from "@components/astro/blog/TagList.astro";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getOgImageUrl } from "@utils";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import Navigation from "@components/astro/global/Navigation.astro";
import "../styles/markdown.css";
import { getPostImgTransitionName } from "@utils";
import { loadNamespaces, t } from "@i18n/i18n";
import { getCategoryTitleByLocale } from "@utils";

interface Props {
    post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const { title, author, description, canonicalURL, pubDateTime, modDatetime } = post.data;

const locale = getLocale(Astro.url);
const ogUrl = getOgImageUrl(locale, post, Astro.url);
const transitionName = getPostImgTransitionName(post);

await loadNamespaces(locale, ["common", "blog"]);

const layoutProps = {
    title: `${t("blog.post")}: ${title}`,
    author,
    description,
    pubDateTime,
    // This is here because of CMS shenanigans. It saves dates which are empty as empty strings ("").
    modDatetime: typeof modDatetime === "string" ? undefined : modDatetime,
    canonicalURL,
    ogImage: ogUrl,
};

const { Content, headings } = await post.render();
---

<MainLayout {...layoutProps}>
    <HeadHrefLangs post={post} slot="hreflangs" />
    <Navigation post={post} title={layoutProps.title} slot="header" />
    <main>
        <div class="post-header">
            <BreadCrumbs>
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label={t("common.home")} />
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
                <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={t("blog.posts")} />
                <BreadCrumbsItem currentPage={true} label={post.data.title} />
            </BreadCrumbs>
            <div class="post-description">
                <div class="post-meta" data-pagefind-body>
                    <h1 class="gradient-text">{post.data.title}</h1>
                    <div class="meta-author">
                        <p>By {post.data.author}. <FormattedDate pubDateTime={post.data.pubDateTime} modDatetime={post.data.modDatetime} locale={locale} /></p>

                        {
                            post.data.category && (
                                <p>
                                    {t("blog.posted_category")}: <a href={getRelativeLocaleUrl(locale, `/blog/categories/${post.data.category.id}`)}>{getCategoryTitleByLocale(locale, post.data.category.id)}</a>
                                </p>
                            )
                        }
                    </div>
                    <div class="tags">
                        <TagList post={post} bgColor="rgba(var(--bg-color), 1)" justify="flex-start" padding="0" />
                    </div>
                </div>
                <div class="post-image">
                    <img src={ogUrl} title={post.data.title} alt={post.data.title} loading="eager" transition:animate="slide" />
                </div>
            </div>
        </div>
        <article class="post-md">
            <hr />
            {
                headings.length !== 0 && (
                    <>
                        <h2 id="toc">{t("blog.toc")}</h2>
                        <details id="tocDetails">
                            <summary>{t("blog.open_toc")}</summary>
                        </details>
                    </>
                )
            }
            <Content />
        </article>
    </main>
    <Footer />
</MainLayout>

<script>
    /**
     * Wraps TOC generated by remark-toc in details element
     * This needs to be done because of i18n
     */
    const wrapToc = () => {
        const details = document.querySelector<HTMLHeadElement>("#tocDetails");

        if (details === null) {
            return;
        }

        const toc = document.querySelector<HTMLElement>(".toc")!;
        details.appendChild(toc);

        toc.style.display = "block";
    };

    wrapToc();

    document.addEventListener("astro:after-swap", () => {
        wrapToc();
    });
</script>

<style>
    .post-description {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        align-items: center;

        @media (max-width: 768px) {
            flex-direction: column;
            gap: 1rem;
        }

        h1 {
            margin-bottom: 0.25rem;
        }

        .post-meta {
            @media (max-width: 768px) {
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
            }
        }

        .meta-author {
            font-size: 0.85rem;
            color: var(--body-color);
        }

        .post-image {
            overflow: hidden;
            max-width: 200px;
            transition: 0.3s ease;
            transform-origin: top right;

            @media (max-width: 768px) {
                align-self: center;
                max-width: calc(100vw - 20%);
            }

            @media (min-width: 768px) {
                &:hover {
                    transform: scale(2.5);

                    img {
                        border: 1px solid rgba(var(--accent), 1);
                    }
                }
            }

            img {
                border-radius: 6px;
                object-fit: cover;
                object-position: 50% 50%;
                box-shadow: var(--global-box-shadow);
                border: 1px solid transparent;
            }
        }
    }
    .tags {
        margin-top: 0.5rem;
    }
</style>
