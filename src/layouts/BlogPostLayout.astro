---
import "../styles/remark-asides.css";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries, render,  } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import TagList from "@components/astro/blog/TagList.astro";
import ViewCount from "@components/astro/blog/ViewCount.astro";
import BreadCrumbs from "@components/astro/global/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/global/BreadCrumbsItem.astro";
import Drawer from "@components/astro/global/Drawer.astro";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import MarkdownContent from "@components/astro/global/MarkdownContent.astro";
import SearchMeta from "@components/astro/global/SearchMeta.astro";
import Section from "@components/astro/global/Section.astro";
import Comments from "@components/react/Comments";
import type { AllowedLocales } from "@i18n-config";
import { getBlogPostDate, getBlogPostImageUrl, getOgImageUrl } from "@utils/content";
import { getReadingTime } from "@utils/content";
import MainLayout from "./MainLayout.astro";

interface Props {
	post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const { Content, headings } = await render(post);
const locale = Astro.currentLocale as AllowedLocales;
const { pubDate, modDate, title, description } = post.data;
const relatedTags = await getEntries(post.data.tags);
const image = getBlogPostImageUrl(locale, post, Astro.url);
const readingTime = getReadingTime(post.body ?? "");

const layoutProps = {
	title: `${m.blog__post()}: ${title}`,
	author: "Dalibor Hon",
	description: description,
	pubDate: pubDate,
	modDate: typeof modDate === "string" ? undefined : modDate,
	ogImage: getOgImageUrl(locale, post, Astro.url),
};

const tagFilter = relatedTags.map((tag) => {
	return {
		name: m.blog__tags(),
		value: "#" + tag.data.languages[locale],
	};
});

const tags = relatedTags
	?.map((tag) => {
		return "#" + tag.data.languages[locale];
	})
	.join(" ");

const searchProps = {
	title: layoutProps.title,
	description: layoutProps.description,
	date: getBlogPostDate(locale, pubDate, modDate).date,
	filter: [...tagFilter!],
	meta: [
		{
			name: m.blog__tags(),
			value: tags!,
		},
	],
};
---

<MainLayout {...layoutProps}>
	<HeadHrefLangs post={post} slot="hreflangs" />
	<SearchMeta {...searchProps} />
	<Drawer post={post}>
		<main>
			<BreadCrumbs>
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/")} label={m.common__home()} />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={m.blog__posts()} />
				<BreadCrumbsItem currentPage={true} label={title} />
			</BreadCrumbs>
			<Section id="blogPost">
				<div class="flex flex-col-reverse gap-4 md:flex-row md:justify-between">
					<div class="flex flex-col gap-1">
						<h1 class="mb-3 text-3xl font-bold">{title}</h1>
						<div class="ml-1 flex flex-col gap-4">
							<p>
								<span class="mr-1">
									<i class="fa-regular fa-calendar"></i>
								</span>
								<span><FormattedDate {pubDate} {modDate} {locale} /></span>
							</p>
							<p>
								<span class="mr-1">
									<i class="fa-regular fa-clock"></i>
								</span>
								<span>{readingTime} {m.common__minutes()}</span>
							</p>
							<p>
								<span class="mr-1">
									<i class="fa-regular fa-eye"></i>
								</span>
								<span class="inline-flex">
									<span class="mr-1">{m.common__view_count()}:</span>
									<ViewCount server:defer url={Astro.url.pathname}>
										<span slot="fallback" class="skeleton flex h-5 w-9"></span>
									</ViewCount>
								</span>
							</p>
							<div class="mt-4"><TagList post={post} /></div>
						</div>
					</div>
					<div class="max-w-[340px]">
						<Image class="rounded-lg" src={image} width={600} height={315} title={title} alt={title} loading="eager" transition:animate="slide" />
					</div>
				</div>
				<div class="divider"></div>
				<MarkdownContent headings={headings} tocPosition="inside">
					<Content />
				</MarkdownContent>
			</Section>
			<Section id="comments">
				<Comments client:visible locale={locale} />
			</Section>
		</main>
		<Footer />
	</Drawer>
</MainLayout>
