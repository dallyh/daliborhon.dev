---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import FormattedDate from "@components/astro/blog/FormattedDate.astro";
import TagList from "@components/astro/blog/TagList.astro";
import Footer from "@components/astro/global/Footer.astro";
import HeadHrefLangs from "@components/astro/global/HeadHrefLangs.astro";
import Navigation from "@components/astro/global/Navigation.astro";
import SearchMeta from "@components/astro/global/SearchMeta.astro";
import TableOfContents from "@components/astro/global/TableOfContents.astro";
import type { AllowedLocales } from "@i18n-config";
import { getBlogPostDate, getBlogPostImageUrl, getOgImageUrl } from "@utils/content";
import MainLayout from "./MainLayout.astro";

interface Props {
	post: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const locale = Astro.currentLocale as AllowedLocales;
const { pubDate, modDate, title, description } = post.data;
const { Content, headings } = await post.render();
const relatedTags = await getEntries(post.data.tags);
const image = getBlogPostImageUrl(locale, post, Astro.url);

const layoutProps = {
	title: `${m.blog__post()}: ${title}`,
	author: "Dalibor Hon",
	description: description,
	pubDate: pubDate,
	modDate: typeof modDate === "string" ? undefined : modDate,
	ogImage: getOgImageUrl(locale, post, Astro.url),
};

const tagFilter = relatedTags.map((tag) => {
	return {
		name: m.blog__tags(),
		value: "#" + tag.data.languages[locale],
	};
});

const tags = relatedTags
	?.map((tag) => {
		return "#" + tag.data.languages[locale];
	})
	.join(" ");

const searchProps = {
	title: layoutProps.title,
	description: layoutProps.description,
	date: getBlogPostDate(locale, pubDate, modDate).date,
	filter: [...tagFilter!],
	meta: [
		{
			name: m.blog__tags(),
			value: tags!,
		},
	],
};
---

<MainLayout {...layoutProps}>
	<HeadHrefLangs post={post} slot="hreflangs" />
	<Navigation post={post} slot="header" />
	<SearchMeta {...searchProps} />
	<main class="blog-post">
		<div class="post-header">
			<BreadCrumbs>
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/")} label={m.common__home()} />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
				<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/posts")} label={m.blog__posts()} />
				<BreadCrumbsItem currentPage={true} label={title} />
			</BreadCrumbs>
			<div class="post-description">
				<div class="post-meta">
					<h1 class="gradient-text">{title}</h1>
					<div class="meta-details">
						<FormattedDate {pubDate} {modDate} {locale} />
					</div>
					<div class="tags">
						<TagList post={post} />
					</div>
				</div>
				<div class="post-image">
					<Image src={image} width={1200} height={630} title={title} alt={title} loading="eager" transition:animate="slide" />
				</div>
			</div>
			<hr />
		</div>
		<article class="prose max-w-none dark:prose-invert md-content">
			<TableOfContents {headings} />
			<Content />
		</article>
	</main>
	<Footer />
</MainLayout>

<style is:global>
	.blog-post {
		img {
			border-radius: var(--border-radius);
		}
	}
</style>

<style>
	.post-header {
		hr {
			border-color: #374151;
			border-top-width: 1px;
			border-top-style: solid;
			margin-top: 2rem;
			margin-bottom: 2rem;
		}
	}

	.post-description {
		display: flex;
		justify-content: space-between;
		flex-wrap: wrap;

		@media (max-width: 768px) {
			align-items: center;
			flex-direction: column;
			gap: 1rem;
		}

		h1 {
			margin-bottom: 0.25rem;
		}

		.post-meta {
			@media (max-width: 768px) {
				display: flex;
				flex-direction: column;
				align-items: center;
				text-align: center;
			}
		}

		.meta-details {
			font-size: 0.875rem;
			color: var(--body-color);
			line-height: 1.5rem;
		}

		.post-image {
			overflow: hidden;
			max-width: 400px;

			@media (max-width: 768px) {
				align-self: center;
				max-width: 100vw;
			}

			img {
				object-fit: cover;
				object-position: 50% 50%;
				box-shadow: var(--global-box-shadow);
				border: 1px solid transparent;
			}
		}
	}

	.tags {
		margin-top: 0.5rem;
	}
</style>
