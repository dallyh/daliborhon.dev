---
import { getEntry, render } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import * as m from "$messages";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import SearchMeta from "@components/astro/global/SearchMeta.astro";
import PageLayout from "@layouts/PageLayout.astro";
import { removeTrailingSlash } from "@utils";
import MarkdownContent from "@components/astro/global/MarkdownContent.astro";

export { getStaticPaths } from "@i18n/utils";

const locale = Astro.currentLocale!;

const entry = await getEntry("resume", locale);

if (!entry) {
	console.error("Resume entry was not found.");
	return new Response(null, { status: 404, statusText: "Resume entry was not found" });
}

const { Content, headings } = await render(entry);

const layoutProps = {
	title: "Dalibor Hon - " + m.common__resume(),
	description: m.resume__resume_page_description(),
};

const searchProps = {
	title: m.common__resume(),
	description: layoutProps.description,
};
---

<PageLayout {...layoutProps} showCrumbs>
	<Fragment slot="crumbs">
		<BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/about")} label={m.common__about()} />
		<BreadCrumbsItem currentPage href={getRelativeLocaleUrl(locale, "/resume")} label={m.common__resume()} />
	</Fragment>
	<SearchMeta {...searchProps} />
	<div class="section">
		<MarkdownContent headings={headings} tocPosition="inside">
			<Content />
		</MarkdownContent>
		<a
			id="download"
			class="button is-primary is-anchor floating"
			href={removeTrailingSlash(getRelativeLocaleUrl(locale, "/about/resume/pdf"))}
			download
			title={m.resume__download_cv()}
			aria-label={m.resume__download_cv()}
		>
			<span class="icon-text">
				<span class="icon is-medium">
					<i class="fas fa-file-pdf fa-lg"></i>
				</span>
				<span class="text">{m.resume__download_cv()}</span>
			</span>
		</a>
	</div>
</PageLayout>

<script>
	import * as m from "$messages";

	function createAndDownloadBlob(blob: Blob, name: string) {
		const link = document.createElement("a");
		link.setAttribute("download", name);

		const blobUrl = URL.createObjectURL(blob);
		link.href = blobUrl;

		document.body.appendChild(link);

		link.click();

		document.body.removeChild(link);
		URL.revokeObjectURL(blobUrl);
	}

	function setupDownload() {
		const downloadButton = document.getElementById("download") as HTMLAnchorElement;

		downloadButton.onclick = async (e) => {
			e.preventDefault();

			downloadButton.classList.toggle("is-loading");

			try {
				window.toast({ message: m.resume__generating_pdf(), type: "is-info" });

				// Fetch the PDF file
				const res = await fetch(downloadButton.href);

				// Check if the response is OK
				if (!res.ok) {
					window.toast({ message: m.common__download_error(), type: "is-danger" });
					console.error(`Failed to fetch the file: ${res.statusText}`);
					return;
				}

				// Convert response to Blob
				const blob = await res.blob();
				const filename = res.headers.get("x-filename")!;
				createAndDownloadBlob(blob, filename);
				window.toast({ message: m.common__download_success(), type: "is-success" });
			} catch (error) {
				window.toast({ message: m.common__download_error(), type: "is-danger" });
				console.error("Error downloading the file:", error);
			} finally {
				downloadButton.classList.toggle("is-loading");
			}
		};
	}

	document.addEventListener("astro:page-load", setupDownload);
</script>

<style>
	:root {
		scroll-timeline: --scroll-timeline y;
		/* Firefox supports the older "vertical" syntax */
		scroll-timeline: --scroll-timeline vertical;
	}

	.section {
		position: relative;
		width: 100%;
	}

	@keyframes show {
		to {
			left: 50%;
			transform: translateX(-50%);
			width: max-content;
			border-radius: var(--bulma-control-radius);
		}
	}

	@keyframes showText {
		to {
			visibility: visible;
			opacity: 1;
			width: unset;
		}
	}

	@keyframes moveIcon {
		to {
			margin-left: 0;
		}
	}

	.button {
		&.floating,
		.text,
		.icon {
			animation-duration: 1ms; /* Firefox requires this to apply the animation */
			animation-range-start: 96%;
			animation-range-end: 100%;
			animation-direction: alternate;
			animation-timeline: scroll(y root);
		}

		&.floating {
			animation-name: show;
		}

		.text {
			animation-name: showText;
		}

		.icon {
			animation-name: moveIcon;
		}
	}

	.button {
		&.floating {
			overflow: hidden;
			position: sticky;
			left: calc(100% - 4rem);
			bottom: 1rem;
			z-index: 1020;
			width: 55px;
			height: 55px;
			border-radius: 50%;
			/* min-width: unset; */

			> span {
				display: inline-flex;
				flex-wrap: nowrap;
			}

			.icon {
				margin-left: 0.5rem;
			}

			.text {
				opacity: 0;
				visibility: hidden;
				width: 0;
			}
		}

		svg {
			font-size: 1.25rem;
			display: inline-block;
		}
	}

	@keyframes showButton {
		from {
			transform: scale(0);
		}

		to {
			transform: scale(1);
		}
	}
</style>
