---
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import PostsGrid from "@components/astro/blog/PostsGrid.astro";
import Section from "@components/astro/global/Section.astro";
import { locales } from "@i18n/config";
import * as m from "$messages";
import { getRoutingLocale } from "@i18n/utils";
import PageLayout from "@layouts/PageLayout.astro";
import { getAllBlogArticlesByCategoryAndLocale } from "@services/content/getAllBlogArticlesByCategoryAndLocale";
import { getAllCategoriesByLocale } from "@services/content/getAllCategoriesByLocale";
import { slugifyStr } from "@utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import SearchMeta from "@components/astro/global/SearchMeta.astro";

export async function getStaticPaths() {
    const paths = await Promise.all(
        locales.map(async (locale) => {
            const categories = await getAllCategoriesByLocale({ locale });

            return await Promise.all(
                categories.map(async (cat) => {
                    const posts = await getAllBlogArticlesByCategoryAndLocale({ locale, categoryName: cat?.name! });

                    if (posts === undefined || posts.length === 0) {
                        return {
                            params: { lang: getRoutingLocale(locale), category: slugifyStr(locale, cat?.name!) },
                            props: { posts: undefined, category: cat, locale: locale },
                        };
                    }

                    return {
                        params: { lang: getRoutingLocale(locale), category: slugifyStr(locale, cat?.name!) },
                        props: { posts: posts, category: cat, locale: locale },
                    };
                }),
            );
        }),
    );

    return paths.flat();
}

const { posts, category, locale } = Astro.props;

const categoryTitle = category?.name!;
const categoryDescription = `${m.blog__posts_with_category()} ${categoryTitle.toLowerCase()}`;
const layoutProps = {
    title: `${m.blog__category()}: ${categoryTitle}`,
    description: categoryDescription,
};
---

<PageLayout {...layoutProps}>
    <BreadCrumbs>
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label={m.common__home()} />
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/categories")} label={m.blog__categories()} />
        <BreadCrumbsItem currentPage={true} label={categoryTitle} />
    </BreadCrumbs>
    <Section id="taggedPosts" isFirstSection sectionTitle={categoryDescription}>
        {!posts && <p class="category-post-list">{m.blog__no_category_posts()} ðŸ˜ž</p>}
        {posts && posts.length === 0 && <p class="category-post-list">{m.blog__no_category_posts()} ðŸ˜ž</p>}
        {posts && posts.length !== 0 && <PostsGrid posts={posts} />}
    </Section>
</PageLayout>

<style>
    ul {
        display: grid;
        grid-template-rows: 1fr;
        gap: 1rem;
        margin-bottom: 2rem;

        @media (max-width: 468px) {
            grid-template-columns: 1fr;
        }
    }
</style>
