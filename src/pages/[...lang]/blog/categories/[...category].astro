---
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import PostsList from "@components/astro/blog/PostsList.astro";
import Section from "@components/astro/global/Section.astro";
import { locales } from "@config/i18n";
import { loadNamespaces, t } from "@i18n/i18n";
import { getLocale, getRoutingLocale } from "@i18n/utils";
import PageLayout from "@layouts/PageLayout.astro";
import { getCategoryTitleByLocale, getFilteredPostsCollection } from "@utils";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";

export async function getStaticPaths() {
    const categories = await getCollection("categories");

    if (categories === undefined) {
        const paths = locales.flatMap((locale) => {
            return { params: { lang: getRoutingLocale(locale), category: undefined } };
        });
        return paths;
    }

    const paths = await Promise.all(categories.flatMap((cat) => {
        return locales.map(async (locale) => {
            const filteredPosts = await getFilteredPostsCollection({ locale: locale, categoryId: category });

            if (filteredPosts?.length === 0) {
                return { params: { lang: getRoutingLocale(locale), category: undefined } }
            }

            return { params: { lang: getRoutingLocale(locale), category: cat.id } };
        });
    }));

    return paths;
}

const { category } = Astro.params;
const locale = getLocale(Astro.url);
const filteredPosts = await getFilteredPostsCollection({ locale: locale, sort: true, categoryId: category });

// i18next
await loadNamespaces(locale, ["blog", "common"]);

const categoryTitle = await getCategoryTitleByLocale(locale, category);
const categoryDescription = `${t("blog.posts_with_category")} ${categoryTitle.toLowerCase()}`;
const layoutProps = {
    title: `${t("blog.category")}: ${categoryTitle}`,
    description: categoryDescription,
};
---

<PageLayout {...layoutProps}>
    <BreadCrumbs>
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label={t("common.home")} />
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
        <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/categories")} label={t("blog.categories")} />
        <BreadCrumbsItem currentPage={true} label={categoryTitle} />
    </BreadCrumbs>
    <Section id="taggedPosts" isFirstSection sectionTitle={categoryDescription}>
        {!filteredPosts && <p class="category-post-list">{t("blog.no_category_posts")} ðŸ˜ž</p>}
        {filteredPosts && filteredPosts.length === 0 && <p class="category-post-list">{t("blog.no_category_posts")} ðŸ˜ž</p>}
        {filteredPosts && filteredPosts.length !== 0 && <PostsList posts={filteredPosts} />}
    </Section>
</PageLayout>

<style>
    ul {
        display: grid;
        grid-template-rows: 1fr;
        gap: 1rem;
        margin-bottom: 2rem;

        @media (max-width: 468px) {
            grid-template-columns: 1fr;
        }
    }
</style>
