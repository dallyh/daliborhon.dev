---
import { getCollection } from "astro:content";
import { getRoutingLocale, getLocale } from "@i18n/utils";
import PageLayout from "@layouts/PageLayout.astro";
import { loadNamespaces, t } from "@i18n/i18n";
import Section from "@components/astro/global/Section.astro";
import SmallBlogPostPreview from "@components/astro/blog/SmallBlogPostPreview.astro";
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getCategoryTitleByLocale } from "@utils/getCategoryByLocale";

// This is kinda complicated
export async function getStaticPaths() {
    const allPosts = await getCollection("posts", ({ data }) => {
        return !data.hidden;
    });

    const categories = await getCollection("categories");

    const blogLocales = allPosts.map((post) => {
        return post.data.language;
    });
    const uniqueLocales = [...new Set(blogLocales.flat())];

    const paths = categories.flatMap((cat) => {
        return uniqueLocales.map((locale) => {
            return { params: { lang: getRoutingLocale(locale), category: cat.id }, props: { posts: allPosts } };
        });
    });

    return paths;
}

const { category } = Astro.params;
const { posts } = Astro.props;
const locale = getLocale(Astro.url);
const filteredPosts = posts
    .filter((post) => {
        return post.data.category?.id == category && post.data.language === locale;
    })
    .sort((a, b) => {
        return new Date(b.data.pubDateTime).valueOf() - new Date(a.data.pubDateTime).valueOf();
    });

// i18next
const namespaces = ["contactForm"];
await loadNamespaces(locale, namespaces);

const layoutProps = {
    title: "Dalibor Hon",
    description: t("landing.description"),
};

const title = await getCategoryTitleByLocale(locale, category);
---

<PageLayout {...layoutProps}>
    <main>
        <BreadCrumbs>
            <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label="Home" />
            <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
            <BreadCrumbsItem currentPage={true} label="Categories" />
            <BreadCrumbsItem currentPage={true} label={title} />
        </BreadCrumbs>
        <Section id="taggedPosts" sectionTitle={`Posts with category ${title.toLowerCase()}`}>
            <ul>
                {
                    filteredPosts.map((post) => (
                        <li>
                            <SmallBlogPostPreview post={post} />
                        </li>
                    ))
                }
            </ul>
        </Section>
    </main>
</PageLayout>

<style>
    ul {
        display: grid;
        grid-template-rows: 1fr;
        gap: 1rem;
        margin-bottom: 2rem;

        @media (max-width: 468px) {
            grid-template-columns: 1fr;
        }
    }
</style>
