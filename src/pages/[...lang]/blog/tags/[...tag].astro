---
import BreadCrumbs from "@components/astro/blog/BreadCrumbs.astro";
import BreadCrumbsItem from "@components/astro/blog/BreadCrumbsItem.astro";
import PostsList from "@components/astro/blog/PostsList.astro";
import Section from "@components/astro/global/Section.astro";
import { locales } from "@config/i18n";
import { loadNamespaces, t } from "@i18n/i18n";
import { getLocale, getRoutingLocale } from "@i18n/utils";
import PageLayout from "@layouts/PageLayout.astro";
import { getTagByLocale } from "@utils/getTagByLocale";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";

// This is kinda complicated
export async function getStaticPaths() {
    const allPosts = await getCollection("posts", ({ data }) => {
        return !data.hidden;
    });

    const tags = await getCollection("tags");

    if (tags === undefined) {
        const paths = locales.map((locale) => {
            return { params: { lang: getRoutingLocale(locale), tag: undefined }, props: { posts: allPosts } };
        });

        return paths;
    }

    if (allPosts === undefined) {
        const paths = tags.flatMap((tag) => {
            return locales.map((locale) => {
                return { params: { lang: getRoutingLocale(locale), tag: tag.id }, props: { posts: allPosts } };
            });
        });

        return paths;
    }

    const blogLocales = allPosts.map((post) => {
        return post.data.language;
    });
    const uniqueLocales = [...new Set(blogLocales.flat())];

    const paths = tags.flatMap((tag) => {
        return uniqueLocales.map((locale) => {
            return { params: { lang: getRoutingLocale(locale), tag: tag.id }, props: { posts: allPosts } };
        });
    });

    return paths;
}

const { tag } = Astro.params;
const { posts } = Astro.props;
const locale = getLocale(Astro.url);
const filteredPosts =
    posts === undefined
        ? undefined
        : posts
              .filter((post) => {
                  return post.data.tags.some((t) => t.id === tag) && post.data.language === locale;
              })
              .sort((a, b) => {
                  return new Date(b.data.pubDateTime).valueOf() - new Date(a.data.pubDateTime).valueOf();
              });

// i18next
await loadNamespaces(locale, ["blog", "common"]);

const tagTitle = await getTagByLocale(locale, tag);
const tagDescription = `${t("blog.posts_tagged")} #${tagTitle}`;
const layoutProps = {
    title: `${t("blog.tag")}: ${tagTitle}`,
    description: tagDescription,
};
---

<PageLayout {...layoutProps}>
    <main>
        <BreadCrumbs>
            <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/home")} label={t("common.home")} />
            <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog")} label="Blog" />
            <BreadCrumbsItem href={getRelativeLocaleUrl(locale, "/blog/tags/")} label={t("blog.tags")} />
            <BreadCrumbsItem currentPage={true} label={tagTitle} />
        </BreadCrumbs>
        <Section isFirstSection id="taggedPosts" sectionTitle={tagDescription}>
            {!filteredPosts && <p>{t("blog.no_tagged_posts")}</p>}
            {filteredPosts && filteredPosts.length === 0 && <p>{t("blog.no_tagged_posts")}</p>}
            {filteredPosts && filteredPosts.length !== 0 && <PostsList posts={filteredPosts} />}
        </Section>
    </main>
</PageLayout>

<style>
    ul {
        display: grid;
        grid-template-rows: 1fr;
        gap: 1rem;
        margin-bottom: 2rem;

        @media (max-width: 468px) {
            grid-template-columns: 1fr;
        }
    }
</style>
