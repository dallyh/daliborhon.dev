---
import { m } from "@paraglide/messages";
import { Icon } from "astro-icon/components";

interface Props {
	inDrawer?: boolean;
}

const { inDrawer = false } = Astro.props;

const themes = [
	{ theme: "light", description: m.common__theme_light() },
	{ theme: "dark", description: m.common__theme_dark() },
];
---

<theme-selector>
	<div class="dropdown dropdown-center lg:dropdown-end dropdown-hover">
		<div tabindex="0" role="button" class="input input-sm cursor-pointer" aria-haspopup="menu">
			<div class="bg-base-100 border-base-content/10 grid shrink-0 grid-cols-2 gap-0.5 rounded-md border p-1">
				<div class="bg-base-content size-1 rounded-full"></div>
				<div class="bg-primary size-1 rounded-full"></div>
				<div class="bg-secondary size-1 rounded-full"></div>
				<div class="bg-accent size-1 rounded-full"></div>
			</div>
			{m.common__theme()}
		</div>
		<div tabindex="0" class={`dropdown-content ${inDrawer ? "bg-base-300" : "bg-base-200"} text-base-content w-48`}>
			<ul class="menu w-48">
				{
					themes.map((t) => {
						return (
							<li>
								<button class="gap-3 px-2" data-set-theme={t.theme}>
									<div data-theme={t.theme} class="bg-base-100 grid shrink-0 grid-cols-2 gap-0.5 rounded-md p-1 shadow-sm">
										<div class="bg-base-content size-1 rounded-full" />
										<div class="bg-primary size-1 rounded-full" />
										<div class="bg-secondary size-1 rounded-full" />
										<div class="bg-accent size-1 rounded-full" />
									</div>
									<div class="truncate">{t.description}</div>
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" id="checkmark" class="invisible h-3 w-3 shrink-0">
										<path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z" />
									</svg>
								</button>
							</li>
						);
					})
				}
				<li>
					<button class="gap-3 px-2" data-set-theme="system">
						<div class="bg-base-100 rounded-md p-1 shadow-sm">
							<Icon name="heroicons:computer-desktop-16-solid" size="0.75rem" />
						</div>
						<div class="truncate">{m.common__theme_system()}</div>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" id="checkmark" class="invisible h-3 w-3 shrink-0">
							<path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z"></path>
						</svg>
					</button>
				</li>
				<li>
					<button class="gap-3 px-2" data-toggle-bg title="Toggle background">
						<div class="bg-base-100 rounded-md p-1 shadow-sm">
							<Icon name="heroicons:play-pause-solid" />
						</div>
						<div class="truncate">{m.common__theme_bg()}</div>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" id="checkmark" class="invisible h-3 w-3 shrink-0">
							<path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z"></path>
						</svg>
					</button>
				</li>
			</ul>
		</div>
	</div>
</theme-selector>

<script>
	import { m } from "@paraglide/messages";

	class ThemeSelector extends HTMLElement {
		storageKey = window.themeStorageKey;
		buttons = this.querySelectorAll<HTMLButtonElement>("[data-set-theme]")!;
		toggleBgButton = this.querySelector<HTMLButtonElement>("[data-toggle-bg]")!;

		setActive(theme: string) {
			this.buttons.forEach((btn) => {
				const icon = btn.querySelector("#checkmark");
				const isActive = btn.getAttribute("data-set-theme") === theme;
				if (icon) {
					icon.classList.toggle("invisible", !isActive);
				}
			});
		}

		getBgStorageValue(): boolean {
			if (window.localStorage.getItem("bgToggle")) {
				return window.localStorage.getItem("bgToggle") === "on" ? true : false;
			}

			// Default
			return true;
		}

		toggleBgStorageValue() {
			const isSet = window.localStorage.getItem("bgToggle") ?? false;

			if (!isSet) {
				// off from on - which is default. First toggle.
				window.localStorage.setItem("bgToggle", "off");
				return;
			}

			const val = window.localStorage.getItem("bgToggle") === "on" ? true : false;

			if (val) {
				window.localStorage.setItem("bgToggle", "off");
			} else {
				window.localStorage.setItem("bgToggle", "on");
			}
		}

		showBgButtonCheckmark() {
			var isOn = this.getBgStorageValue();
			const icon = this.toggleBgButton.querySelector("#checkmark");
			if (icon) {
				if (isOn) {
					icon.classList.remove("invisible");
				} else {
					icon.classList.add("invisible");
				}
			}
		}

		toggleBg() {
			this.toggleBgStorageValue();
			var isOn = this.getBgStorageValue();
			document.dispatchEvent(new CustomEvent("theme:toggle-bg", { detail: { isOn } }));
			const message = isOn ? m.common__theme_bg_on() : m.common__theme_bg_off();
			window.showToast({ message: message, dismissible: true, type: "info", duration: 1500 });
			this.showBgButtonCheckmark();
		}

		useTheme(theme: string) {
			if (theme === "system") {
				this.setHtmlTheme(this.systemTheme());
			} else {
				this.setHtmlTheme(theme);
			}

			localStorage.setItem(this.storageKey, theme);
			this.setActive(theme);
			document.dispatchEvent(new CustomEvent("theme:changed"));
		}

		setHtmlTheme(theme: string) {
			document.documentElement.dataset.theme = theme;
		}

		systemTheme() {
			return window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark";
		}

		connectedCallback() {
			const storedTheme = localStorage.getItem(this.storageKey) ?? "system";
			const activeTheme = storedTheme === "system" || !storedTheme ? this.systemTheme() : storedTheme;

			this.setActive(storedTheme);
			this.setHtmlTheme(activeTheme);

			this.buttons.forEach((btn) => {
				btn.addEventListener("click", (e) => {
					e.preventDefault();
					const theme = btn.dataset.setTheme!;
					this.useTheme(theme);
				});
			});

			this.showBgButtonCheckmark();
			this.toggleBgButton?.addEventListener("click", this.toggleBg.bind(this));
		}
	}

	customElements.define("theme-selector", ThemeSelector);
</script>
