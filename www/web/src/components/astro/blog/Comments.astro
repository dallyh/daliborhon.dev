---
import type { Locale } from "@paraglide/runtime";

type Props = {
	locale?: Locale;
};
const { locale } = Astro.props;
---

<giscus-comments>
	<div class="relative">
		<button id="show-comments" class="btn btn-primary absolute bottom-0 left-[50%] z-[5] translate-y-[-50%] cursor-pointer active:!translate-y-[-50%]" disabled>Show comments</button>
		<div id="comments-wrapper" class="fade bg-base-100 pointer-events-none h-[180px] p-4 text-white">
			<div id="giscuss-container" data-locale={locale} class="pt-2">
				<!-- Script goes here -->
			</div>
		</div>
	</div>
</giscus-comments>

<script>
	class Comments extends HTMLElement {
		get iframe() {
			return this.querySelector<HTMLIFrameElement>(".giscus-frame")!;
		}

		get commentsBtn() {
			return this.querySelector<HTMLButtonElement>("#show-comments")!;
		}

		get container() {
			return this.querySelector<HTMLDivElement>("#giscuss-container")!;
		}

		get wrapper() {
			return this.querySelector<HTMLDivElement>("#comments-wrapper")!;
		}

		script: HTMLScriptElement | undefined = undefined;

		createScript() {
			const script = document.createElement("script");
			const locale = this.container.dataset.locale;

			Object.entries({
				src: "https://giscus.app/client.js",
				"data-repo": "dallyh/daliborhon.dev",
				"data-repoId": "R_kgDOH42J2g",
				"data-category": "Comments",
				"data-categoryId": "DIC_kwDOH42J2s4Cl4Zg",
				"data-mapping": "pathname",
				"data-strict": "0",
				"data-reactions-enabled": "0",
				"data-emit-metadata": "0",
				"data-theme": document.documentElement.getAttribute("data-theme")!,
				"data-lang": locale!,
				"data-loading": "lazy",
				crossorigin: "anonymous",
			}).forEach(([key, value]) => {
				script.setAttribute(key, value);
			});
			script.setAttribute("async", "true");
			this.container?.appendChild(script);
			this.script = script;
		}

		onloadCallback() {
			const btn = this.commentsBtn;
			btn.disabled = false;
		}

		createObserver() {
			const iframeObserver = new MutationObserver((mutations, obs) => {
				const iframe = this.iframe;
				if (iframe) {
					loadedObserver.observe(this.iframe, { attributes: true, attributeFilter: ["class"] });
					obs.disconnect();
				}
			});
			iframeObserver.observe(this.container, { childList: true, subtree: true, attributes: true });

			const loadedObserver = new MutationObserver((mutations, obs) => {
				if (!this.iframe.classList.contains("giscus-frame--loading")) {
					this.onloadCallback();
					obs.disconnect();
				}
			});
		}

		themeChangedCallback() {
			let newTheme = document.documentElement.getAttribute("data-theme");
			if (this.iframe instanceof HTMLIFrameElement && this.iframe.contentWindow) {
				this.iframe.contentWindow.postMessage({ giscus: { setConfig: { theme: newTheme || "light" } } }, "https://giscus.app");
				this.iframe.contentDocument?.appendChild;
			}
		}

		showCommentsCallback() {
			this.commentsBtn.style.display = "none";
			this.wrapper.classList.remove("fade");
			this.wrapper.classList.remove("pointer-events-none");
			this.wrapper.style.height = "auto";
		}

		connectedCallback() {
			this.createScript();
			this.createObserver();
			window.addEventListener("theme-changed", this.themeChangedCallback.bind(this));
			this.commentsBtn.addEventListener("click", this.showCommentsCallback.bind(this));
		}

		disconnectedCallback() {
			window.removeEventListener("theme-changed", this.themeChangedCallback.bind(this));
			this.commentsBtn.removeEventListener("click", this.showCommentsCallback.bind(this));
		}
	}

	customElements.define("giscus-comments", Comments);
</script>

<style>
	.fade {
		mask-image: linear-gradient(to top, transparent 35%, var(--color-base-100));
	}
</style>
