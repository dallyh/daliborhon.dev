---
import { m } from "@paraglide/messages";
import type { Locale } from "@paraglide/runtime";

type Props = {
	locale?: Locale;
};
const { locale } = Astro.props;
---

<giscus-comments>
	<div class="relative overflow-hidden">
		<button id="show-comments" class="btn btn-primary absolute bottom-0 left-[50%] z-[5] translate-x-[-50%] cursor-pointer active:!translate-y-[0]" disabled>
			<span class="loading loading-spinner loading-sm"></span>
			{m.comments__show_comments()}
		</button>
		<div id="giscus-container" class="fade bg-base-100 pointer-events-none h-[160px] p-4 text-white">
			<script
				is:inline
				src="https://giscus.app/client.js"
				data-repo="dallyh/daliborhon.dev"
				data-repoid="R_kgDOH42J2g"
				data-category="Comments"
				data-categoryid="DIC_kwDOH42J2s4Cl4Zg"
				data-mapping="pathname"
				data-strict="0"
				data-reactions-enabled="0"
				data-emit-metadata="0"
				data-theme="dark"
				data-lang={locale}
				data-input-position="bottom"
				data-loading="lazy"
				crossorigin="anonymous"
				async
				data-astro-rerun></script>
		</div>
	</div>
</giscus-comments>

<script>
	class Comments extends HTMLElement {
		get iframe() {
			return this.querySelector<HTMLIFrameElement>(".giscus-frame")!;
		}

		get commentsBtn() {
			return this.querySelector<HTMLButtonElement>("#show-comments")!;
		}

		get container() {
			return this.querySelector<HTMLDivElement>("#giscus-container")!;
		}

		onloadCallback() {
			this.commentsBtn.disabled = false;
			this.commentsBtn.querySelector("span")?.remove();
		}

		createObserver() {
			const iframeObserver = new MutationObserver(() => {
				const iframe = this.iframe;
				if (iframe) {
					this.onloadCallback();
					iframeObserver.disconnect();
				}
			});
			iframeObserver.observe(this.container, { childList: true, subtree: true, attributes: true });
		}

		themeChangedCallback() {
			let newTheme = document.documentElement.getAttribute("data-theme");
			if (this.iframe instanceof HTMLIFrameElement && this.iframe.contentWindow) {
				this.iframe.contentWindow.postMessage({ giscus: { setConfig: { theme: newTheme || "light" } } }, "https://giscus.app");
				this.iframe.contentDocument?.appendChild;
			}
		}

		showCommentsCallback() {
			this.commentsBtn.style.display = "none";
			this.container.classList.remove("fade");
			this.container.classList.remove("pointer-events-none");
			this.container.style.height = "auto";
		}

		connectedCallback() {
			this.createObserver();
			window.addEventListener("theme-changed", this.themeChangedCallback.bind(this));
			this.commentsBtn.addEventListener("click", this.showCommentsCallback.bind(this));
		}

		disconnectedCallback() {
			window.removeEventListener("theme-changed", this.themeChangedCallback.bind(this));
			this.commentsBtn.removeEventListener("click", this.showCommentsCallback.bind(this));
		}
	}

	customElements.define("giscus-comments", Comments);
</script>

<style>
	.fade {
		mask-image: linear-gradient(to top, transparent 35%, var(--color-base-100));
	}
</style>
