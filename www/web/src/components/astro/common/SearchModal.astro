---
import { m } from "@paraglide/messages";
---

<site-search>
	<dialog id="searchDialog" class="modal modal-bottom sm:modal-middle" aria-label={m.common__search()}>
		<div class="modal-box overflow-hidden sm:w-11/12 sm:max-w-3xl">
			<form method="dialog">
				<button data-close-modal aria-label={m.common__close_btn()} class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">
					<span class="sr-only">{m.common__close_btn()}</span>âœ•
				</button>
			</form>
			<div id="pagefind" class="p-4">
				<div id="loading" class="flex items-center justify-center gap-2">
					<span class="loading loading-dots loading-xl"></span>
					<span>{m.common__loading()}</span>
				</div>
			</div>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
</site-search>

<script>
	import { Logger } from "@logger";
	import { trailingSlash, base } from "astro:config/client";

	class SiteSearch extends HTMLElement {
		logger = new Logger("search-modal");
		pageFindInstance: any = null;
		dialog = this.querySelector("dialog")!;
		loading = this.querySelector("#loading")!;
		stylesheetAdded = false;

		connectedCallback() {
			const closeBtn = this.querySelector("[data-close-modal]")!;

			if (!this.dialog) {
				this.logger.error("Dialog element was not found.");
				return;
			}

			// Listen for a custom event to open the modal:
			window.addEventListener("open-search-modal", this.openModal.bind(this));

			// Open on keyboard shortcut
			window.addEventListener("keydown", (e) => {
				const isInput =
					document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
				if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
					this.dialog?.open ? this.closeModal() : this.openModal(e);
					e.preventDefault();
				} else if (e.key === "/" && !this.dialog?.open && !isInput) {
					this.openModal(e);
					e.preventDefault();
				}
			});

			// Close modal button
			closeBtn.addEventListener("click", this.closeModal);

			this.dialog?.addEventListener("close", () => {
				document.documentElement.removeAttribute("data-search-modal-open");
			});
		}

		disconnectedCallback() {
			this.dialog?.open ?? this.dialog?.close();

			if (this.pageFindInstance) {
				this.pageFindInstance.destroy();
			}
		}

		async openModal(event?: Event) {
			this.dialog?.showModal();
			await this.addStylesheet();
			//await this.initPagefind();
			// this.loading.remove();
			document.documentElement.toggleAttribute("data-search-modal-open", true);
			this.querySelector("input")?.focus();
			event?.stopPropagation();
		}

		closeModal() {
			this.dialog?.close();
		}

		async addStylesheet() {
			if (this.stylesheetAdded) {
				this.logger.debug("Stylesheet is already present.");
				return;
			}

			const styleEle = document.createElement("style");
			const style = await import("@pagefind/default-ui/css/ui.css?raw");
			styleEle.innerHTML = `${style.default}`;
			document.head.prepend(styleEle);
			this.stylesheetAdded = true;
		}

		async initPagefind() {
			if (this.pageFindInstance !== null) {
				this.logger.debug("Pagefind instance is already initialized.");
				return;
			}

			const forwardSlash = trailingSlash === "always" ? "/" : "";
			//@ts-ignore - no types
			const { PagefindUI } = await import("@pagefind/default-ui");

			this.pageFindInstance = new PagefindUI({
				element: "#pagefind",
				baseUrl: base,
				bundlePath: `${base}pagefind/`,
				showImages: false,
				showSubResults: false,
				processResult: function (result: any) {
					if (result?.meta?.image) {
						let resultBase = new URL(result.url, String(window.location));
						let remappedImage = new URL(result.meta.image, resultBase);

						if (remappedImage.hostname !== window.location.hostname) {
							result.meta.image = remappedImage.toString();
						} else {
							result.meta.image = remappedImage.pathname + forwardSlash;
						}
					}
				},
			});
		}

		initOnIdle() {
			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));

			onIdle(async () => {
				await this.initOnIdle();
			});
		}
	}

	customElements.define("site-search", SiteSearch);
</script>

<style is:global>
	[data-theme="light"] {
		--pagefind-ui-primary: var(--color-primary);
		--pagefind-ui-text: var(--color-base-content);
		--pagefind-ui-background: var(--color-base-100);
		--pagefind-ui-border: var(--color-primary);
		--pagefind-ui-tag: var(--color-base-200);
		--pagefind-ui-border-width: 2px;
		--pagefind-ui-border-radius: 8px;
		--pagefind-ui-image-border-radius: 8px;
		--pagefind-ui-font: inherit;
	}

	[data-theme="dark"] {
		--pagefind-ui-primary: var(--color-primary);
		--pagefind-ui-text: var(--color-base-content);
		--pagefind-ui-background: var(--color-base-100);
		--pagefind-ui-border: var(--color-primary);
		--pagefind-ui-tag: var(--color-base-200);
		--pagefind-ui-border-width: 2px;
		--pagefind-ui-border-radius: 8px;
		--pagefind-ui-image-border-radius: 8px;
		--pagefind-ui-font: inherit;
	}

	#pagefind {
		.pagefind-ui__search-input {
			border-color: var(--color-base-content);
			border-radius: var(--rounded-btn, 0.5rem);
			border-width: 1px;

			&:focus-within,
			&:focus-visible,
			&:focus {
				outline: none;
				border-color: var(--color-primary) !important;
				box-shadow: none !important;
			}
		}

		.pagefind-ui__drawer {
			position: relative;
			margin-top: 1rem;
			gap: 1rem;
			overflow-y: scroll;
			max-height: calc(100vh - 15rem);
		}

		@media (min-width: 640px) {
			.pagefind-ui__drawer {
				flex-wrap: nowrap;
			}

			.pagefind-ui__filter-panel {
				position: sticky;
				top: 1rem;
			}
		}
	}
</style>
