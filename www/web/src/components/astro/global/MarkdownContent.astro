---
import { m } from "@paraglide/messages";
import { generateTOCHTML } from "@utils/content";
import type { MarkdownHeading } from "astro";

interface Props {
	tocPosition?: "inside" | "default";
	headings?: MarkdownHeading[];
}

const { tocPosition = "default", headings } = Astro.props;
---

<article class=`md-content prose max-w-none ${tocPosition}` id="article">
	{
		headings && headings.length !== 0 && (
			<toc-root>
				<div id="toc">
					<details id="tocDetails" class="max-[1024px]:collapse-arrow bg-base-200 collapse rounded-xl border border-slate-300/5">
						<summary class="collapse-title text-xl">{m.blog__toc()}</summary>
						<nav class="toc">
							<Fragment set:html={generateTOCHTML(headings)} />
						</nav>
					</details>
				</div>
			</toc-root>
		)
	}
	<div id="content">
		<slot />
	</div>
</article>

<script>
	// https://github.com/miaobuao/astro-theme-meo/blob/main/src/theme/components/ArticleToc.astro

	class TableOfContents extends HTMLElement {
		get details() {
			return this.querySelector("#tocDetails") as HTMLDetailsElement | null;
		}

		openToc() {
			console.log(this.details);
			if (!this.details) return;
			const width = window.innerWidth;
			this.details.open = width >= 1024;
		}

		connectedCallback() {
			this.openToc();
			window.addEventListener("resize", this.openToc);
		}

		disconnectedCallback() {
			window.removeEventListener("resize", this.openToc);
		}
	}

	class TocItem extends HTMLElement {
		get anchor() {
			return this.querySelector("a");
		}

		get relativeHeading() {
			return document.getElementById(this.dataset.slug!);
		}

		activate = () => {
			this.classList.add("active");
		};

		deactivate = () => {
			this.classList.remove("active");
		};
	}

	class ArticleToc extends HTMLElement {
		get items() {
			return Array.from(this.querySelectorAll<TocItem>("toc-item"));
		}

		get mainScroll() {
			return document;
		}

		connectedCallback() {
			this.handleUpdate();
			this.mainScroll.addEventListener("scroll", this.handleUpdate);
		}

		disconnectedCallback() {
			this.mainScroll.removeEventListener("scroll", this.handleUpdate);
		}

		handleUpdate = () => {
			if (this.items.length === 0) return;

			if (this.items.length === 1) {
				this.items[0].activate();
				return;
			}

			const header = document.querySelector(".navbar");
			const headerHeight = header?.getBoundingClientRect().height ?? 0;
			const distance = headerHeight * 3;

			const itemsWithBbox = this.items
				.map((item) => ({
					bbox: item.relativeHeading?.getBoundingClientRect(),
					item,
				}))
				.filter(({ bbox }) => !!bbox)
				.map(({ bbox, item }) => ({
					bbox: bbox!,
					item,
				}));

			if (itemsWithBbox.length === 0) {
				return;
			}

			const firstPositiveIdx = itemsWithBbox.findIndex(({ bbox }) => bbox.top >= 0);
			let target: TocItem;
			if (firstPositiveIdx === -1) {
				target = itemsWithBbox.at(-1)!.item;
			} else if (firstPositiveIdx === 0) {
				target = itemsWithBbox[0].item;
			} else {
				const firstPositiveItem = itemsWithBbox[firstPositiveIdx];
				const nextPositiveItem = itemsWithBbox.at(firstPositiveIdx + 1);
				if (firstPositiveItem.bbox.bottom < headerHeight) {
					if (nextPositiveItem && nextPositiveItem.bbox.top <= distance) {
						target = nextPositiveItem.item;
					} else {
						target = firstPositiveItem.item;
					}
				} else if (firstPositiveItem.bbox.top <= distance) {
					target = firstPositiveItem.item;
				} else {
					target = itemsWithBbox[firstPositiveIdx - 1].item;
				}
			}

			itemsWithBbox.forEach(({ item }) => {
				if (item === target) {
					item.activate();
				} else {
					item.deactivate();
				}
			});
		};
	}

	customElements.define("toc-root", TableOfContents);
	customElements.define("toc-item", TocItem);
	customElements.define("article-toc", ArticleToc);
</script>

<style>
	.md-content {
		position: relative;
		width: 100%;
	}

	@media screen and (min-width: 1024px) {
		.md-content {
			&.inside {
				display: grid;
				grid-template-columns: calc(100% - 300px - 2rem) min-content;
				grid-template-rows: 1fr;
				gap: 2rem;

				#content {
					grid-row: 1;
					grid-column: 1;
				}

				#toc {
					z-index: 2;
					grid-row: 1;
					grid-column: 2;
					position: sticky;
					top: var(--header-height); /* Navbar */
					height: max-content;
					max-height: calc(100vh - var(--header-height) - 1rem);
					width: 300px;
				}
			}
		}
	}
</style>

<style is:global>
	.md-content {
		img {
			justify-self: center;
			border: 1px solid transparent;
			border-radius: 0.5rem;
		}

		figure:not([class]) {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			figcaption {
				text-align: center;
			}
		}
	}

	nav.toc {
		height: max-content;
		max-height: calc(100vh - var(--header-height) - 5rem);
		scrollbar-width: thin;
		overflow-y: scroll;
		padding-inline: 0.725rem;

		ul {
			margin-top: 0;
			font-size: 0.875rem;
			font-weight: 400;
		}
	}

	#toc {
		summary::marker,
		summary::-webkit-details-marker {
			display: none;
		}

		summary {
			list-style: none;
			pointer-events: none;
		}
	}

	@media screen and (max-width: 1024px) {
		#toc {
			summary::marker,
			summary::-webkit-details-marker {
				display: none;
			}

			details {
				margin-bottom: 1rem;
			}

			summary {
				pointer-events: all;
				padding-left: 1rem;
				margin-bottom: 0;
				position: relative;
				cursor: pointer;
			}
		}
	}
</style>
