---
const settings = { color: "var(--color-primary)", className: "loading-indicator", animationDuration: 300 };
---

<style is:global>
	.loading-indicator {
		pointer-events: none;
		background-color: var(--color-primary);
		position: fixed;
		z-index: 1031;
		top: 0;
		left: 0;
		width: 100%;
		height: 2px;
		transition:
			transform var(--animation-duration) ease-out,
			opacity var(--animation-duration) ease-in;
		transform: translate3d(0, 0, 0) scaleX(var(--progress, 0));
		transform-origin: 0;
	}
</style>

<script>
	declare global {
		interface Window {
			startTransition: () => void;
		}
	}
	let isTransitioning = false;

	function initTransitions() {
		if (!document.startViewTransition) {
			return;
		}

		const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
		if (prefersReducedMotion.matches) {
			return;
		}

		function startTransition() {
			if (isTransitioning) return;
			window.dispatchEvent(new CustomEvent("transition:start"));
			isTransitioning = true;
		}
		window.startTransition = startTransition;

		document.addEventListener("DOMContentLoaded", (e) => {
			const links = document.querySelectorAll("a");

			for (const link of links) {
				if (link.dataset.disableTransition) return;
				if (link.hash) continue;
				if (link.hostname !== window.location.hostname) continue;

				// Perform view transition if supported
				link.addEventListener("click", (event) => {
					startTransition();
				});
			}
		});
	}

	initTransitions();
</script>

<script is:inline define:vars={{ className: settings.className, animationDuration: settings.animationDuration }}>
	(() => {
		if (!document.startViewTransition) {
			return;
		}

		let defaultProgress = 0.25;
		let progress = defaultProgress;
		let trickleInterval = undefined;

		const element = document.createElement("div");
		element.classList.add(className);
		element.ariaHidden = "true";
		element.style.setProperty("--animation-duration", `${animationDuration}ms`);

		const setProgress = (_progress) => {
			progress = _progress;
			element.style.setProperty("--progress", String(progress));
		};

		const setOpacity = (_opacity) => {
			element.style.setProperty("opacity", String(_opacity));
		};
		setOpacity(0);

		document.addEventListener("DOMContentLoaded", () => {
			document.body.prepend(element);
		});

		window.addEventListener("transition:start", () => {
			setOpacity(1);
			trickleInterval = window.setInterval(() => {
				setProgress(Math.min(progress + Math.random() * 0.03, 0.98));
			}, animationDuration);
		});

		window.addEventListener("pagereveal", (e) => {
			if (!e.viewTransition) {
				return;
			}

			document.body.prepend(element);
			setOpacity(1);
			setProgress(1);
			document.addEventListener("DOMContentLoaded", () => {
				window.setTimeout(() => {
					setOpacity(0);
				}, animationDuration / 2);

				window.setTimeout(() => {
					setProgress(defaultProgress);
				}, animationDuration * 4);
			});
		});
	})();
</script>

<!-- At bottom because code highlighting is broken after this block -->
<style>
	@media (prefers-reduced-motion: no-preference) {
		@view-transition {
			navigation: auto;
		}
	}
</style>
