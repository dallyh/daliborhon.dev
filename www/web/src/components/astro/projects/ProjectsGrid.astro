---
import { type CollectionEntry, getEntries } from "astro:content";
import { m } from "@paraglide/messages";
import { githubRestClient } from "@services/github/githubRestClient";
import ProjectCard from "./ProjectCard.astro";
import Grid, { type GridProps } from "@components/astro/common/Grid.astro";

interface Props extends GridProps {
	projects: CollectionEntry<"projects">[];
}

const { showAllUrl = false, projects, small = false, autoCols = true } = Astro.props;

const mapProjectsData = async () => {
	if (!projects) return [];

	const results = await Promise.all(
		projects.map(async (p) => {
			const relatedTags = await getEntries(p.data.tags);

			const projectUrl = new URL(p.data.sourceUrl);
			const [owner, repo] = projectUrl.pathname.split("/").filter(Boolean);

			const repository = (await githubRestClient.repos.get({ owner, repo })).data;
			const languagesData = (await githubRestClient.repos.listLanguages({ repo: repository.name, owner: repository.owner.login })).data;

			const data = {
				project: p,
				relatedTags: relatedTags,
				githubData: {
					createdAt: new Date(repository.created_at),
					languages: languagesData,
				},
			};

			return data;
		}),
	);

	return results;
};

const data = await mapProjectsData();
const url = "/projects";
const urlDescription = m.projects__see_all();
---

<Grid items={data} {url} {urlDescription} {autoCols} {showAllUrl}>
	{
		(item) => {
			return <ProjectCard project={item.project} githubData={item.githubData} relatedTags={item.relatedTags} />;
		}
	}
</Grid>
