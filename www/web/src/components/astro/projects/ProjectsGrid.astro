---
import { type CollectionEntry, getEntries } from "astro:content";
import AllEntriesUrl from "@components/astro/common/AllEntriesUrl.astro";
import { m } from "@paraglide/messages";
import { githubRestClient } from "@services/github/githubRestClient";
import ProjectCard from "./ProjectCard.astro";

interface Props {
	projects: CollectionEntry<"projects">[];
	showAllUrl?: boolean;
}

const { showAllUrl = false, projects } = Astro.props;

const mapProjectsData = async () => {
	if (!projects) return [];

	const results = await Promise.all(
		projects.map(async (p) => {
			const relatedTags = await getEntries(p.data.tags);

			const projectUrl = new URL(p.data.sourceUrl);
			const [owner, repo] = projectUrl.pathname.split("/").filter(Boolean);

			const repository = (await githubRestClient.repos.get({ owner, repo })).data;
			const languagesData = (await githubRestClient.repos.listLanguages({ repo: repository.name, owner: repository.owner.login })).data;

			const data = {
				project: p,
				relatedTags: relatedTags,
				githubData: {
					createdAt: new Date(repository.created_at),
					languages: languagesData,
				},
			};

			return data;
		}),
	);

	return results;
};

const data = await mapProjectsData();

const allEntriesProps = {
	url: "/projects",
	urlDescription: m.projects__see_all(),
};

const cols = () => {
	if (projects.length % 3 === 0) {
		return 3;
	}

	if (projects.length % 2 === 0) {
		return 2;
	}

	return 1;
};

const grid = {
	1: "md:grid-cols-1",
	2: "md:grid-cols-2",
	3: "md:grid-cols-3",
};
---

<div class="flex flex-col">
	<ul class={`grid grid-cols-1 gap-3 ${grid[cols()]}`}>
		{
			data.map((dat) => {
				return (
					<li class="cell">
						<ProjectCard {...dat} />
					</li>
				);
			})
		}
	</ul>
	{showAllUrl && <AllEntriesUrl {...allEntriesProps} />}
</div>
