zerops:
    - setup: libsqld
      build:
          os: alpine
          base: rust@1.80
          prepareCommands:
              - apk add musl-dev coreutils build-base gcc
          buildCommands:
              - git clone --depth 1 --branch musl-fix https://github.com/dallyh/libsql.git
              - |
                  cd libsql
                  cargo build -p libsql-server --release
                  target/release/sqld --help
          deployFiles:
              - libsql/target/release/~sqld
          cache:
              - libsql/target
              - ~/.cargo
      run:
          os: alpine
          base: rust@1.80
          envVariables:
              LIBSQL_BOTTOMLESS_ENDPOINT: ${dbstorage_apiUrl}
              LIBSQL_BOTTOMLESS_BUCKET: ${dbstorage_bucketName}
              LIBSQL_BOTTOMLESS_AWS_DEFAULT_REGION: eu-central-1
              LIBSQL_BOTTOMLESS_AWS_ACCESS_KEY_ID: ${dbstorage_accessKeyId}
              LIBSQL_BOTTOMLESS_AWS_SECRET_ACCESS_KEY: ${dbstorage_secretAccessKey}
          start: ./sqld --enable-bottomless-replication --http-listen-addr 0.0.0.0:8080
          ports:
              - port: 8080
                httpSupport: true

    - setup: frontend
      build:
          base: nodejs@22
          envVariables:
              GITHUB_API_AUTH_TOKEN: ${RUNTIME_GITHUB_API_AUTH_TOKEN}
              OA_GITHUB_CLIENT_SECRET: ${RUNTIME_OA_GITHUB_CLIENT_SECRET}
              OA_GITHUB_CLIENT_ID: ${RUNTIME_OA_GITHUB_CLIENT_ID}
              APP_VERSION_NAME: ${RUNTIME_appVersionName}
              ASTRO_DB_REMOTE_URL: ${RUNTIME_ASTRO_DB_REMOTE_URL}
              UPTIME_API_TOKEN: ${RUNTIME_UPTIME_API_TOKEN}
              PREVIEW: false
          buildCommands:
              - pnpm install --shamefully-hoist
              - pnpm build:remote
          cache:
              - node_modules
          deployFiles:
              - dist
              - node_modules
              - package.json
              - src/assets/fonts
      run:
          base: nodejs@22
          ports:
              - port: 4321
                httpSupport: true
          envVariables:
              HOST: 0.0.0.0
              APP_VERSION_NAME: ${appVersionName}
              ASTRO_DB_REMOTE_URL: http://libsqld:8080
              PREVIEW: false
          start: pnpm start
          healthCheck:
              httpGet:
                  port: 4321
                  path: /api/status

    - setup: fepreview
      build:
          base: nodejs@22
          envVariables:
              GITHUB_API_AUTH_TOKEN: ${RUNTIME_GITHUB_API_AUTH_TOKEN}
              OA_GITHUB_CLIENT_SECRET: ${RUNTIME_OA_GITHUB_CLIENT_SECRET}
              OA_GITHUB_CLIENT_ID: ${RUNTIME_OA_GITHUB_CLIENT_ID}
              APP_VERSION_NAME: ${RUNTIME_appVersionName}
              ASTRO_DB_REMOTE_URL: ${RUNTIME_ASTRO_DB_REMOTE_URL}
              UPTIME_API_TOKEN: ${RUNTIME_UPTIME_API_TOKEN}
              PREVIEW: true # Builds preview posts
          buildCommands:
              - pnpm install --shamefully-hoist
              - pnpm run build:remote # Building remote, but using local preseeded file
          cache:
              - node_modules
          deployFiles:
              - dist
              - node_modules
              - package.json
              - src/assets/fonts
              - db/dev.db
      run:
          base: nodejs@22
          ports:
              - port: 4321
                httpSupport: true
          envVariables:
              HOST: 0.0.0.0
              APP_VERSION_NAME: ${appVersionName}
              ASTRO_DB_REMOTE_URL: file:db/dev.db
              PREVIEW: true # Builds preview posts
          start: pnpm start
          healthCheck:
              httpGet:
                  port: 4321
                  path: /api/status
